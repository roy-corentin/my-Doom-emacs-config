#+TITLE: JilkoniX Doom Emacs Config
#+AUTHOR Corentin ROY (JilkoniX)
#+PROPERTY: header-args :tangle config.el
#+STARTUP: showeverything
#+EXPORT_FILE_NAME: ~/Org/html/config.html

* TABLE OF CONTENTS                                                            :TOC:
- [[#init][INIT]]
- [[#about-this-config][ABOUT THIS CONFIG]]
- [[#startup-performance][STARTUP PERFORMANCE]]
  - [[#garbage-collection][Garbage collection]]
  - [[#native-compil][Native Compil]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#dashboard][DASHBOARD]]
  - [[#configuring-dashboard][Configuring Dashboard]]
  - [[#splash-screen][Splash Screen]]
  - [[#dashboard-in-emacsclient][Dashboard in Emacsclient]]
- [[#elfeed][ELFEED]]
- [[#emojis][EMOJIS]]
- [[#font][FONT]]
- [[#theme][THEME]]
  - [[#doom-theme][Doom Theme]]
  - [[#set-transparency][Set Transparency]]
- [[#line-setup][LINE SETUP]]
- [[#company][COMPANY]]
- [[#file-manager-dired][FILE MANAGER (DIRED)]]
  - [[#keybindings-to-open-dired][Keybindings To Open Dired]]
  - [[#keybindings-within-dired][Keybindings Within Dired]]
  - [[#keybindings-for-peep-dired-mode][Keybindings For Peep-Dired-Mode]]
- [[#cursor][CURSOR]]
- [[#move-between-buffer][MOVE BETWEEN BUFFER]]
- [[#drag-stuff][DRAG STUFF]]
- [[#htmlerb][HTML.ERB]]
- [[#org][ORG]]
  - [[#org-location][Org location]]
  - [[#disable-line-numbers-for-org-mode][Disable line numbers for Org mode]]
  - [[#clock-sound-for-org-timer][Clock sound for org timer]]
  - [[#defining-a-few-things][Defining A Few Things]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#fancy-priority][Fancy Priority]]
  - [[#center-org-mode][Center Org Mode]]
  - [[#keyword-todo][Keyword TODO]]
- [[#org-agenda][ORG-AGENDA]]
  - [[#view][View]]
- [[#org-roam][ORG-ROAM]]
  - [[#org-roam-ui][Org-Roam UI]]
- [[#org-present][ORG-PRESENT]]
  - [[#installation][Installation]]
- [[#org-gcal][ORG-GCAL]]
- [[#mouse-scrolling][MOUSE SCROLLING]]
- [[#treemacs][TREEMACS]]
  - [[#filter-to-treemacs][Filter To Treemacs]]
  - [[#treemacs-follow-mode][Treemacs Follow Mode]]
  - [[#add-icon-in-treemacs][Add Icon In Treemacs]]
- [[#python][PYTHON]]
  - [[#black-for-python-format][Black For Python Format]]
- [[#react][REACT]]
  - [[#add-web-mode-to-react][Add Web Mode To React]]
- [[#custom-web-mode][CUSTOM WEB-MODE]]
- [[#rjsx-minor-mode][RJSX MINOR MODE]]
  - [[#with-a-lambda-to-compare-extension][With A Lambda To Compare Extension]]
- [[#prettier-rc][PRETTIER-RC]]
  - [[#with-method-to-compare-extension-bug][With Method To Compare Extension (BUG)]]
  - [[#with-a-lambda-to-compare-extension-1][With A Lambda To Compare Extension]]
  - [[#add-it-to-web-mode][Add It To Web Mode]]
- [[#centaur-tabs][CENTAUR-TABS]]
- [[#format-on-save][FORMAT ON SAVE]]
  - [[#disable-format-on-save-for-web-mode][Disable format on save for web-mode]]
- [[#import-other-config][IMPORT OTHER CONFIG]]
- [[#information][INFORMATION]]

* INIT
 Place your private configuration here! Remember, you do not need to run 'doom sync' after modifying this file!


 Some functionality uses this to identify you, e.g. GPG configuration, email
 clients, file templates and snippets. It is optional.
#+begin_src elisp
(setq user-full-name "Corentin Roy"
      user-mail-address "corentin.roy02@laposte.net")
#+end_src

* ABOUT THIS CONFIG
This is my personal Doom Emacs config. I use Doom Emacs for all my project so I need some configuration to be exactly like I want

* STARTUP PERFORMANCE
  This section is where it make Emacs faster to load.

** Garbage collection
Makes startup faster by reducing the frequency of garbage collection

#+begin_src emacs-lisp
;; Using garbage magic hack.
(use-package gcmh
  :config
  (gcmh-mode 1))
;; Setting garbage collection threshold
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6)

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

;; Silence compiler warnings as they can be pretty disruptive (setq comp-async-report-warnings-errors nil)
#+end_src

** Native Compil
#+begin_src emacs-lisp
;; Silence compiler warnings as they can be pretty disruptive
;; (if (boundp 'comp-deferred-compilation)
;;     (setq comp-deferred-compilation nil)
;;   (setq native-comp-deferred-compilation nil))
;; In noninteractive sessions, prioritize non-byte-compiled source files to
;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
;; to skip the mtime checks on every *.elc file.
(setq load-prefer-newer noninteractive)
#+end_src

* ALL THE ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.

#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

* DASHBOARD
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

** Configuring Dashboard
If you use the package dashboard

#+begin_src emacs-lisp
;; (use-package dashboard
;;   :init      ;; tweak dashboard config before loading it
;;   (setq dashboard-set-heading-icons t)
;;   (setq dashboard-set-file-icons t)
;;   (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
;;   ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
;;   ;; (setq dashboard-startup-banner "~/.emacs.d/emacs-dash.png")  ;; use custom image as banner
;;   (setq dashboard-center-content nil) ;; set to 't' for centered content
;;   (setq dashboard-items '((recents . 5)
;;                           (agenda . 5 )
;;                           (bookmarks . 3)
;;                           (projects . 3)
;;                           (registers . 3)))
;;   :config
;;   (dashboard-setup-startup-hook)
;;   (dashboard-modify-heading-icons '((recents . "file-text")
;; 			      (bookmarks . "book"))))
#+end_src

** Splash Screen

#+begin_src elisp
;; (setq fancy-splash-image "~/Pictures/Fox.png")
;; (setq fancy-splash-image "~/Pictures/Doom_Logo.png")
;; (setq fancy-splash-image "~/Pictures/cyberpunk_logo.png")
(setq fancy-splash-image "~/Pictures/blackhole-lines.svg")
#+end_src

*** Random Ascii Art
#+begin_src  elisp
;; (defvar +fl/splashcii-query ""
;;   "The query to search on asciiur.com")

;; (defun +fl/splashcii ()
;;   (split-string (with-output-to-string
;;                   (call-process "splashcii" nil standard-output nil +fl/splashcii-query))
;;                 "\n" t))

;; (defun +fl/doom-banner ()
;;   (let ((point (point)))
;;     (mapc (lambda (line)
;;             (insert (propertize (+doom-dashboard--center +doom-dashboard--width line)
;;                                 'face 'doom-dashboard-banner) " ")
;;             (insert "\n"))
;;           (+fl/splashcii))
;;     (insert (make-string (or (cdr +doom-dashboard-banner-padding) 0) ?\n))))

;; ;; override the first doom dashboard function
;; (setcar (nthcdr 0 +doom-dashboard-functions) #'+fl/doom-banner)

;; (setq +fl/splashcii-query "halloween")
#+end_src

*** Custom Ascii Art
#+begin_src elisp
;; (defun custom_banner ()
;;   (let* ((banner '("   ________                             "
;;                    "   \______ \   ____   ____   _____      "
;;                    "    |    |  \ /  _ \ /  _ \ /     \     "
;;                    "    |    `   (  <_> |  <_> )  Y Y  \    "
;;                    "   /_______  /\____/ \____/|__|_|  /    "
;;                    "           \/                    \/     "
;;                    "___________                             "
;;                    "\_   _____/ _____ _____    ____   ______"
;;                    " |    __)_ /     \\__  \ _/ ___\ /  ___/"
;;                    " |        \  Y Y  \/ __ \\  \___ \___ \ "
;;                    "/_______  /__|_|  (____  /\___  >____  >"
;;                    "        \/      \/     \/     \/     \/ "))
;;          (longest-line (apply #'max (mapcar #'length banner))))
;;     (put-text-property
;;      (point)
;;      (dolist (line banner (point))
;;        (insert (+doom-dashboard--center
;;                 +doom-dashboard--width
;;                 (concat line (make-string (max 0 (- longest-line (length line))) 32)))
;;                "\n"))
;;      'face 'doom-dashboard-banner)))

;; (setq +doom-dashboard-ascii-banner-fn #'custom_banner)
#+end_src

** Dashboard in Emacsclient
This setting ensures that emacsclient always opens on *dashboard* rather than *scratch*.

#+begin_src emacs-lisp
(after! persp-mode
  (setq persp-emacsclient-init-frame-behaviour-override "main"))
#+end_src

* ELFEED
An RSS newsfeed reader for Emacs.

#+begin_src emacs-lisp
  (setq elfeed-search-feed-face ":foreground #fff :weight bold"
        elfeed-feeds (quote
                      (("https://www.reddit.com/r/linux.rss" reddit linux)
                       ("https://www.reddit.com/r/commandline.rss" reddit commandline)
                       ("https://www.reddit.com/r/distrotube.rss" reddit distrotube)
                       ("https://www.reddit.com/r/emacs.rss" reddit emacs)
                       ("https://www.gamingonlinux.com/article_rss.php" gaming linux)
                       ("https://hackaday.com/blog/feed/" hackaday linux)
                       ("https://opensource.com/feed" opensource linux)
                       ("https://linux.softpedia.com/backend.xml" softpedia linux)
                       ("https://itsfoss.com/feed/" itsfoss linux)
                       ("https://www.zdnet.com/topic/linux/rss.xml" zdnet linux)
                       ("https://www.phoronix.com/rss.php" phoronix linux)
                       ("http://feeds.feedburner.com/d0od" omgubuntu linux)
                       ("https://www.computerworld.com/index.rss" computerworld linux)
                       ("https://www.networkworld.com/category/linux/index.rss" networkworld linux)
                       ("https://www.techrepublic.com/rssfeeds/topic/open-source/" techrepublic linux)
                       ("https://betanews.com/feed" betanews linux)
                       ("http://lxer.com/module/newswire/headlines.rss" lxer linux)
                       ("https://distrowatch.com/news/dwd.xml" distrowatch linux))))

  (add-hook 'elfeed-show-mode-hook 'visual-line-mode)
  (evil-define-key 'normal elfeed-show-mode-map
    (kbd "J") 'elfeed-goodies/split-show-next
    (kbd "K") 'elfeed-goodies/split-show-prev)
  (evil-define-key 'normal elfeed-search-mode-map
    (kbd "J") 'elfeed-goodies/split-show-next
    (kbd "K") 'elfeed-goodies/split-show-prev)

  (add-hook! 'elfeed-search-mode-hook #'elfeed-update)
#+end_src

* EMOJIS
Emojify is an Emacs extension to display emojis. It can display github style emojis like :smile: or plain ascii ones like :).

#+begin_src emacs-lisp
(use-package emojify
  :hook (after-init . global-emojify-mode))
#+end_src

* FONT
- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.
- `doom-unicode-font' -- for unicode glyphs
- `doom-serif-font' -- for the `fixed-pitch-serif' face

 See 'C-h v doom-font' for documentation and more examples of what they
 accept. For example:

#+begin_src elisp
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;; (setq doom-font (font-spec :family "JetBrainsMono NF" :size 13 :weight 'medium))
(setq doom-font (font-spec :family "JetBrains Mono" :size 13 :weight 'light))
;; (setq doom-font (font-spec :family "Hack Nerd Font" :size 13 :weight 'medium))

;; enable bold and italic
(after! doom-themes
  (setq doom-themes-enable-bold t)
  (setq doom-themes-enable-italic t))

;; comment and keyword in Italic for example "for"
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))

(set-face-attribute 'font-lock-comment-face nil :foreground "#5B6268" :slant 'italic)
(set-face-attribute 'font-lock-function-name-face nil :foreground "#c678dd" :slant 'italic)
(set-face-attribute 'font-lock-variable-name-face nil :foreground "#dcaeea" :slant 'italic)

;; changes certain keywords to symbols, such as lamda!
;; (setq global-prettify-symbols-mode t)
#+end_src


If you or Emacs can't find your font, use 'M-x describe-font' to look them
up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
refresh your font settings. If Emacs still can't find your font, it likely
wasn't installed correctly. Font issues are rarely Doom issues!

* THEME
** Doom Theme
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:
#+begin_src elisp
;; (setq doom-theme 'doom-monokai-machine)
(setq doom-theme 'doom-one)
;; (setq doom-theme 'doom-solarized-dark)
#+end_src

** Set Transparency
#+begin_src elisp
(set-frame-parameter (selected-frame) 'alpha '(85 85))
(add-to-list 'default-frame-alist '(alpha 85 85))
#+end_src

* LINE SETUP
This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.
#+begin_src elisp
(setq display-line-numbers-type `relative)
#+end_src

* COMPANY

#+begin_src elisp
(require 'company-tabnine)
(add-to-list 'company-backends #'company-tabnine)
(setq company-idle-delay 0
      company-minimum-prefix-length 1)
(setq company-tooltip-margin 3)
(setq company-format-margin-function 'company-text-icons-margin)
(setq company-text-icons-add-background t)
(custom-set-faces
 '(company-tooltip
   ((t (:background "#57666a" )))))
#+end_src

* FILE MANAGER (DIRED)
Dired is the file manager within Emacs.  Below, I setup keybindings for image previews (peep-dired).

** Keybindings To Open Dired
| COMMAND    | DESCRIPTION                          | KEYBINDING |
|------------+--------------------------------------+------------|
| dired-jump | /Jump to current directory in dired/ | SPC d d    |

** Keybindings Within Dired
| COMMAND            | DESCRIPTION                                   | KEYBINDING |
|--------------------+-----------------------------------------------+------------|
| dired-view-file    | /View file in dired/                          | g o        |
| dired-up-directory | /Go up in directory tree/                     | h          |
| dired-find-file    | /Go down in directory tree (or open if file)/ | l          |

** Keybindings For Peep-Dired-Mode
| COMMAND              | DESCRIPTION                                | KEYBINDING |
|----------------------+--------------------------------------------+------------|
| peep-dired           | /Toggle previews within dired/             | M p        |
| peep-dired-next-file | /Move to next file in peep-dired-mode/     | j          |
| peep-dired-prev-file | /Move to previous file in peep-dired-mode/ | k          |

#+begin_src emacs-lisp
(with-eval-after-load 'dired
  (map! :leader
        (:prefix-map ("d" . "dired")
         :desc "Dired Jump Directory" "d" #'dired-jump))
  (define-key dired-mode-map (kbd "M-p") 'peep-dired)
  (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
  (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
  (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
  (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))

(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
;; ;; With dired-open plugin, you can launch external programs for certain extensions
;; ;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+end_src

* CURSOR
Disable the cursor going back off when switch between Insert an Normal mode

#+begin_src elisp
(setq evil-move-beyond-eol t)
(setq evil-move-cursor-back nil)
#+end_src

* MOVE BETWEEN BUFFER
Move previous and next buffer

#+begin_src elisp
(map! :ni "C-," #'previous-buffer)
(map! :ni "C-;" #'next-buffer)

(eval-after-load 'centaur-tabs
    (map! :ni "C-," #'centaur-tabs-backward))
(eval-after-load 'centaur-tabs
    (map! :ni "C-;" #'centaur-tabs-forward))
#+end_src

* DRAG STUFF
To move a complete line

#+begin_src elisp
(map! "C-M-k" #'drag-stuff-up)
(map! "C-M-j" #'drag-stuff-down)
#+end_src

* HTML.ERB
Add file format '.html.erb' to lsp-mode

#+begin_src elisp
(after! lsp-mode
  (add-to-list 'lsp-language-id-configuration '(".*\\.html\\.erb$" . "html"))
  (setq lsp-ui-sideline-show-code-actions t)
  )
#+end_src

Disable format on save for this format

#+begin_src elisp
(add-hook! 'web-mode
  (if (equal ".*\\erb\\" (file-name-nondirectory buffer-file-name))
      (setq +format-with :none)
    ))
#+end_src

* ORG
** Org location
If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!
#+begin_src elisp
(setq org-directory "~/org/")
#+end_src

** Disable line numbers for Org mode
#+begin_src elisp
(dolist (mode '(org-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Clock sound for org timer
#+begin_src elisp
(after! org
  (setq org-clock-sound "~/Music/ding.wav"))
#+end_src

** Defining A Few Things
#+begin_src elisp
(defun efs/org-mode-setup ()
  (org-indent-mode)
  ;; (variable-pitch-mode 1) ;; Center text in the middle
  (visual-line-mode 1))

(defun efs/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.0)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

(use-package org
  :hook (org-mode . efs/org-mode-setup)
  :config
  (setq org-ellipsis " ▼ ")
  (efs/org-font-setup))
#+end_src

** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src elisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Fancy Priority
Org-fancy-priorities give us some prettier priorities

#+begin_src elisp
(use-package org-fancy-priorities
  :hook
  (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list '((?A . "[‼]")
                                    (?B . "[❗]")
                                    (?C . "[☕]")
                                    (?D . "[♨]")
                                    (?1 . "[⚡]")
                                    (?2 . "[⮬]")
                                    (?3 . "[⮮]")
                                    (?4 . "[☕]")
                                    (?I . "[IMPORTANT]"))))
;; default customization
;; (setq org-fancy-priorities-list '("⚡" "⬆" "⬇" "☕")))
#+end_src

** Center Org Mode
Center Org File just like a Word file

#+begin_src elisp
;; (defun efs/org-mode-visual-fill ()
;;   (setq visual-fill-column-width 100
;;         visual-fill-column-center-text t)
;;   (visual-fill-column-mode 1))

;; (use-package visual-fill-column
;;   :hook (org-mode . efs/org-mode-visual-fill))

(setq org-image-actual-width nil)
#+end_src

** Keyword TODO
Use custom TODO keywords

#+begin_src elisp
(after! org
    (setq org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
        '((sequence
            "TODO(t)"             ; A task that is ready to be tackled
            "IN-PROGRESS(i)"      ; A task that is in progress
            "HOLD(h)"             ; Something is holding up this task
            "|"                   ; The pipe necessary to separate "active" states and "inactive" states
            "DONE(d)"             ; Task has been completed
            "CANCELLED(c)" )      ; Task has been cancelled
          (sequence
            "🚩TODO(f)"           ; A task that is ready to be tackled
            "👷🏻IN-PROGRESS(w)"    ; A task that is in progress
            "🔒HOLD(l)"           ; Something is holding up this task
            "|"                   ; The pipe necessary to separate "active" states and "inactive" states
            "✔DONE(e)"           ; Task has been completed
            "❌CANCELLED(x)" )
          (sequence
           "[ ](T)"               ; A task that is ready tobe tackled
           "[-](I)"               ; A task that is already started
           "[?](H)"               ; A task that is holding up by a reason ?
           "|"                    ; The pipe necessary to separate "active" states and "inactive" states
           "[X](D)" ))))          ; Tash has been completed

#+end_src

Configure style of TODO keywords

#+begin_src elisp
(after! org
  (setq org-todo-keyword-faces
    '(("IN-PROGRESS" . (:foreground "#b7a1f5" :weight: bold )) ("HOLD" . org-warning)
      ("[ ]" . (:foreground "#82b66a" :weight: bold)) ("[-]" . (:foreground "#b7a1f5" :weight: bold ))
      ("[?]" . org-warning)
      ("👷🏻IN-PROGRESS" . (:foreground "#b7a1f5" :weight: bold )) ("🔒HOLD" . org-warning))))
#+end_src

* ORG-AGENDA
** View
Change agenda view:
    - At top, the #A Priority
    - In the middle the week view
    - At the bottom list todo task

#+begin_src elisp
(after! org
    (setq org-agenda-custom-commands
        '(("c" "Simple agenda view"
            ((tags "PRIORITY=\"A\""
                    ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                    (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (agenda "")
            (alltodo ""))))))
#+end_src

* ORG-ROAM
Example of basic config org-raom
 - (after! org
          (setq org-roam-directory "~/Documents/org/roam/")
          (setq org-roam-index-file "~/Documents/org/roam/index.org"))

#+begin_src elisp
(after! org
  (setq org-roam-directory "~/RoamNotes")
  (setq org-roam-index-file "~/RoamNotes/index.org"))
#+end_src

** Org-Roam UI
#+begin_src elisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
;; To get from the repo
;;   :straight
;;     (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
    :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

#+end_src

* ORG-PRESENT
** Installation
Install org-present if not already installed

#+begin_src elisp
;; (unless (package-installed-p org-present)
;;   (package-install 'org-present'))
#+end_src

* ORG-GCAL
Synchronize google calendar with org

#+begin_src elisp
(setq org-gcal-client-id "809125859117-d4lsgmmpri4bmefhrj2n22uqn63gdf42.apps.googleusercontent.com"
      org-gcal-client-secret "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"
      org-gcal-fetch-file-alist '(("corentin33210@gmail.com" .  "~/org/schedule.org")))
(require 'org-gcal)
#+end_src

* MOUSE SCROLLING
Emacs' default scrolling is annoying because of the sudden half-page jumps.  Also, I wanted to adjust the scrolling speed.

#+begin_src emacs-lisp
(setq scroll-conservatively 101) ;; value greater than 100 gets rid of half page jumping
(setq mouse-wheel-scroll-amount '(3 ((shift) . 3))) ;; how many lines at a time
(setq mouse-wheel-progressive-speed t) ;; accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
#+end_src

* TREEMACS
** Filter To Treemacs
#+begin_src elisp
(after! treemacs
  (defvar treemacs-file-ignore-extensions '()
    "File extension which `treemacs-ignore-filter' will ensure are ignored")
  (defvar treemacs-file-ignore-globs '()
    "Globs which will are transformed to `treemacs-file-ignore-regexps' which `treemacs-ignore-filter' will ensure are ignored")
  (defvar treemacs-file-ignore-regexps '()
    "RegExps to be tested to ignore files, generated from `treeemacs-file-ignore-globs'")
  (defun treemacs-file-ignore-generate-regexps ()
    "Generate `treemacs-file-ignore-regexps' from `treemacs-file-ignore-globs'"
    (setq treemacs-file-ignore-regexps (mapcar 'dired-glob-regexp treemacs-file-ignore-globs)))
  (if (equal treemacs-file-ignore-globs '()) nil (treemacs-file-ignore-generate-regexps))
  (defun treemacs-ignore-filter (file full-path)
    "Ignore files specified by `treemacs-file-ignore-extensions', and `treemacs-file-ignore-regexps'"
    (or (member (file-name-extension file) treemacs-file-ignore-extensions)
        (let ((ignore-file nil))
          (dolist (regexp treemacs-file-ignore-regexps ignore-file)
            (setq ignore-file (or ignore-file (if (string-match-p regexp full-path) t nil)))))))
  (add-to-list 'treemacs-ignored-file-predicates #'treemacs-ignore-filter))

(setq treemacs-file-ignore-extensions
      '(;; C/C++
        "o"
        "gcna"
        "gcdo"
        ;; other
        "vscode"
        "idea"
        ))
#+end_src

** Treemacs Follow Mode
#+begin_src elisp
(use-package treemacs
  :defer t
  :config
  (progn
    (treemacs-follow-mode t))
  )
#+end_src

** Add Icon In Treemacs
#+begin_src elisp
(setq doom-themes-treemacs-theme "doom-colors")
#+end_src

* PYTHON
** Black For Python Format
#+begin_src elisp
(use-package! python-black
  :demand t
  :after python
  :config
  (add-hook! 'python-mode-hook #'python-black-on-save-mode)
  (map! :leader :desc "Blacken Buffer" "m b b" #'python-black-buffer)
  (map! :leader :desc "Blacken Region" "m b r" #'python-black-region)
  (map! :leader :desc "Blacken Statement" "m b s" #'python-black-statement)
  )
#+end_src

* REACT
** Add Web Mode To React
#+begin_src elisp
(add-to-list 'auto-mode-alist '("\\.js[x]?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.ts[x]?\\'" . web-mode))
#+end_src

* CUSTOM WEB-MODE
#+begin_src elisp
(use-package web-mode
  :custom
  (web-mode-markup-indent-offset 2)
  (web-mode-css-indent-offset 2)
  (web-mode-code-indent-offset 2))
#+end_src

* RJSX MINOR MODE
** With A Lambda To Compare Extension
#+begin_src elisp
(add-hook 'find-file-hook
          (lambda ()
            (when (string= (file-name-extension buffer-file-name) "jsx")
              (rjsx-minor-mode +1))))

(add-hook 'find-file-hook
          (lambda ()
            (when (string= (file-name-extension buffer-file-name) "tsx")
              (rjsx-minor-mode +1))))
#+end_src

* PRETTIER-RC
Add prettier to jsx and tsx files

** With Method To Compare Extension (BUG)
#+begin_src elisp
;; Enables the given minor mode for the current buffer it it matches regex
;; my-pair is a cons cell (regular-expression . minor-mode)
;; (defun enable-minor-mode (my-pair)
;;   (if buffer-file-name ; If we are visiting a file,
;;       ;; and the filename matches our regular expression,
;;       (if (string-match (car my-pair) buffer-file-name)
;;           (funcall (cdr my-pair))))) ; enable the minor mode

;; (add-hook 'web-mode-hook #'(lambda ()
;;                             (enable-minor-mode '("\\.jsx\\'" . prettier-rc)),
;;                             (enable-minor-mode '("\\.tsx\\'" . prettier-rc))))
#+end_src

** With A Lambda To Compare Extension
#+begin_src elisp
(add-hook 'find-file-hook
          (lambda ()
            (when (string= (file-name-extension buffer-file-name) "jsx")
              (prettier-rc-mode +1))))

(add-hook 'find-file-hook
          (lambda ()
            (when (string= (file-name-extension buffer-file-name) "tsx")
              (prettier-rc-mode +1))))
#+end_src

** Add It To Web Mode
#+begin_src elisp
;; (add-hook 'web-mode-hook 'prettier-rc-mode)
#+end_src

* CENTAUR-TABS
To fix centaur tabs in emacsclient

#+begin_src elisp
(after! centaur-tabs
  (setq centaur-tabs-set-bar 'right))
#+end_src

* FORMAT ON SAVE
** Disable format on save for web-mode
#+begin_src elisp
(setq +format-on-save-enabled-modes
      '(not web-mode))
#+end_src

* IMPORT OTHER CONFIG
Use external rails config, for snippet and method to navigate easily in rails project

#+begin_src elisp
(load (expand-file-name "rails-settings.el" doom-user-dir))
(load (expand-file-name "slang-mode.el" doom-user-dir))
#+end_src

* INFORMATION
 Whenever you reconfigure a package, make sure to wrap your config in an
 `after!' block, otherwise Doom's defaults may override your settings. E.g.

   (after! PACKAGE
     (setq x y))

 The exceptions to this rule:

   - Setting file/directory variables (like `org-directory')
   - Setting variables which explicitly tell you to set them before their
     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
   - Setting doom variables (which start with 'doom-' or '+').

 Here are some additional functions/macros that will help you configure Doom.

 - `load!' for loading external *.el files relative to this one
 - `use-package!' for configuring packages
 - `after!' for running code after a package has loaded
 - `add-load-path!' for adding directories to the `load-path', relative to
   this file. Emacs searches the `load-path' when you load packages with
   `require' or `use-package'.
 - `map!' for binding new keys

 To get information about any of these functions/macros, move the cursor over
 the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
 This will open documentation for it, including demos of how they are used.
 Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
 etc).
 You can also try 'gd' (or 'C-c c d') to jump to their definition and see how

 they are implemented.
