#+TITLE: JilkoniX Doom Emacs Config
#+AUTHOR Corentin ROY (JilkoniX)
#+PROPERTY: header-args :tangle config.el
#+STARTUP: showeverything
#+EXPORT_FILE_NAME: ~/Org/html/config.html

* TABLE OF CONTENTS                                                            :TOC:
- [[#init][INIT]]
- [[#about-this-config][ABOUT THIS CONFIG]]
- [[#startup-performance][STARTUP PERFORMANCE]]
  - [[#garbage-collection][Garbage collection]]
  - [[#native-compil-priority][Native Compil Priority]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#dashboard][DASHBOARD]]
  - [[#splash-screen][Splash Screen]]
  - [[#dashboard-in-emacsclient][Dashboard in Emacsclient]]
- [[#emojis][EMOJIS]]
- [[#font][FONT]]
- [[#theme][THEME]]
  - [[#doom-theme][Doom Theme]]
  - [[#set-transparency][Set Transparency]]
- [[#line-setup][LINE SETUP]]
- [[#company][COMPANY]]
  - [[#add-tabnine-as-company-backends][Add TabNine As Company Backends]]
  - [[#configuration][Configuration]]
- [[#file-manager-dired][FILE MANAGER (DIRED)]]
  - [[#keybindings-to-open-dired][Keybindings To Open Dired]]
  - [[#keybindings-within-dired][Keybindings Within Dired]]
  - [[#keybindings-for-peep-dired-mode][Keybindings For Peep-Dired-Mode]]
- [[#cursor][CURSOR]]
- [[#drag-stuff][DRAG STUFF]]
- [[#org][ORG]]
  - [[#org-location][Org location]]
  - [[#disable-line-numbers-for-org-mode][Disable line numbers for Org mode]]
  - [[#clock-sound-for-org-timer][Clock sound for org timer]]
  - [[#defining-a-few-things][Defining A Few Things]]
  - [[#image][Image]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#fancy-priority][Fancy Priority]]
  - [[#keyword-todo][Keyword TODO]]
- [[#org-present][ORG-PRESENT]]
- [[#org-agenda][ORG-AGENDA]]
  - [[#view][View]]
- [[#org-roam][ORG-ROAM]]
  - [[#org-roam-ui][Org-Roam UI]]
- [[#org-gcal][ORG-GCAL]]
- [[#search-with-regex][SEARCH WITH REGEX]]
- [[#mouse-scrolling][MOUSE SCROLLING]]
- [[#treemacs][TREEMACS]]
- [[#python][PYTHON]]
  - [[#black-for-python-format][Black For Python Format]]
- [[#web][WEB]]
  - [[#react][REACT]]
  - [[#astro][ASTRO]]
  - [[#htmlerb][HTML.ERB]]
  - [[#custom-web-mode][CUSTOM WEB-MODE]]
  - [[#rjsx-minor-mode][RJSX MINOR MODE]]
  - [[#prettier-rc][PRETTIER-RC]]
- [[#centaur-tabs][CENTAUR-TABS]]
  - [[#to-fix-centaur-tabs-in-emacsclient][To fix centaur tabs in emacsclient]]
  - [[#add-custom-map][Add Custom map]]
  - [[#move-between-buffer][Move Between Buffer]]
- [[#crystal][CRYSTAL]]
- [[#import-other-config][IMPORT OTHER CONFIG]]
- [[#information][INFORMATION]]

* INIT
 Place your private configuration here! Remember, you do not need to run 'doom sync' after modifying this file!


 Some functionality uses this to identify you, e.g. GPG configuration, email
 clients, file templates and snippets. It is optional.
#+begin_src elisp
(setq user-full-name "Corentin Roy"
      user-mail-address "corentin.roy02@laposte.net")
#+end_src

* ABOUT THIS CONFIG
This is my personal Doom Emacs config. I use Doom Emacs for all my project so I need some configuration to be exactly like I want

* STARTUP PERFORMANCE
  This section is where it make Emacs faster to load.

** Garbage collection
Makes startup faster by reducing the frequency of garbage collection

#+begin_src emacs-lisp
;; Using garbage magic hack.
(use-package gcmh
  :config
  (gcmh-mode 1))
;; Setting garbage collection threshold
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6)

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

;; Silence compiler warnings as they can be pretty disruptive (setq comp-async-report-warnings-errors nil)
#+end_src

** Native Compil Priority
#+begin_src emacs-lisp
;; Prefer newer files
(setq load-prefer-newer noninteractive)
#+end_src

* ALL THE ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.

#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

* DASHBOARD
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

** Splash Screen
#+begin_src elisp
;; (setq fancy-splash-image "~/Pictures/Fox.png")
;; (setq fancy-splash-image "~/Pictures/Doom_Logo.png")
;; (setq fancy-splash-image "~/Pictures/cyberpunk_logo.png")
(setq fancy-splash-image "~/Pictures/blackhole-lines.svg")
#+end_src

** Dashboard in Emacsclient
This setting ensures that emacsclient always opens on *dashboard* rather than *scratch*.

#+begin_src emacs-lisp
(after! persp-mode
  (setq persp-emacsclient-init-frame-behaviour-override "main"))
#+end_src

* EMOJIS
Emojify is an Emacs extension to display emojis. It can display github style emojis like :smile: or plain ascii ones like :).

#+begin_src emacs-lisp
(use-package emojify
  :hook (after-init . global-emojify-mode))
#+end_src

* FONT
- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.
- `doom-unicode-font' -- for unicode glyphs
- `doom-serif-font' -- for the `fixed-pitch-serif' face

 See 'C-h v doom-font' for documentation and more examples of what they
 accept. For example:

#+begin_src elisp
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;; (setq doom-font (font-spec :family "JetBrainsMono NF" :size 13 :weight 'light))
;; (setq doom-font (font-spec :family "JetBrains Mono" :size 13 :weight 'light))
;; (setq doom-font (font-spec :family "Hack Nerd Font" :size 13 :weight 'medium))
(setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 13))

;; enable bold and italic
(after! doom-themes
  (setq doom-themes-enable-bold t)
  (setq doom-themes-enable-italic t))

;; comment and keyword in Italic for example "for"
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))

(set-face-attribute 'font-lock-comment-face nil :foreground "#5B6268" :slant 'italic)
(set-face-attribute 'font-lock-function-name-face nil :foreground "#c678dd" :slant 'italic)
(set-face-attribute 'font-lock-variable-name-face nil :foreground "#dcaeea" :slant 'italic)

;; changes certain keywords to symbols, such as lamda!
;; (setq global-prettify-symbols-mode t)
#+end_src


If you or Emacs can't find your font, use 'M-x describe-font' to look them
up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
refresh your font settings. If Emacs still can't find your font, it likely
wasn't installed correctly. Font issues are rarely Doom issues!

* THEME
** Doom Theme
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:
#+begin_src elisp
;; (setq doom-theme 'doom-solarized-dark)
;; (setq doom-theme 'doom-monokai-machine)
;; (setq doom-theme 'doom-henna)
;; (setq doom-theme 'doom-one)
(setq doom-theme 'doom-acario-dark)
#+end_src

** Set Transparency
#+begin_src elisp
(set-frame-parameter (selected-frame) 'alpha '(90 90))
(add-to-list 'default-frame-alist '(alpha 90 90))
#+end_src

* LINE SETUP
This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.
#+begin_src elisp
(setq display-line-numbers-type `relative)
#+end_src

* COMPANY
** Add TabNine As Company Backends
#+begin_src elisp
(require 'company-tabnine)
(add-to-list 'company-backends #'company-tabnine)
#+end_src

** Configuration
+ Show faster and when only one character is pressed
+ Use Text Icon instead of vscode icons
#+begin_src elisp
(setq company-idle-delay 0
      company-minimum-prefix-length 1)
(setq company-tooltip-margin 3)
(setq company-require-match nil)
(setq company-format-margin-function 'company-text-icons-margin)
(setq company-text-icons-add-background t)
(custom-set-faces
 '(company-tooltip
   ((t (:background "#57666a" )))))
#+end_src

* FILE MANAGER (DIRED)
Dired is the file manager within Emacs.  Below, I setup keybindings for image previews (peep-dired).

** Keybindings To Open Dired
| COMMAND    | DESCRIPTION                          | KEYBINDING |
|------------+--------------------------------------+------------|
| dired-jump | /Jump to current directory in dired/ | SPC d d    |

** Keybindings Within Dired
| COMMAND            | DESCRIPTION                                   | KEYBINDING |
|--------------------+-----------------------------------------------+------------|
| dired-view-file    | /View file in dired/                          | g o        |
| dired-up-directory | /Go up in directory tree/                     | h          |
| dired-find-file    | /Go down in directory tree (or open if file)/ | l          |

** Keybindings For Peep-Dired-Mode
| COMMAND              | DESCRIPTION                                | KEYBINDING |
|----------------------+--------------------------------------------+------------|
| peep-dired           | /Toggle previews within dired/             | M p        |
| peep-dired-next-file | /Move to next file in peep-dired-mode/     | j          |
| peep-dired-prev-file | /Move to previous file in peep-dired-mode/ | k          |

#+begin_src emacs-lisp
(with-eval-after-load 'dired
  (map! :leader
        (:prefix-map ("d" . "dired")
         :desc "Dired Jump Directory" "d" #'dired-jump))
  (define-key dired-mode-map (kbd "M-p") 'peep-dired)
  (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
  (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
  (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
  (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))

(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
;; ;; With dired-open plugin, you can launch external programs for certain extensions
;; ;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+end_src

* CURSOR
Disable the cursor going back off when switch between Insert an Normal mode

#+begin_src elisp
(setq evil-move-beyond-eol t)
(setq evil-move-cursor-back nil)
#+end_src

* DRAG STUFF
To move a all the line up and down

#+begin_src elisp
(map! "C-M-k" #'drag-stuff-up)
(map! "C-M-j" #'drag-stuff-down)
#+end_src

* ORG
** Org location
If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!
#+begin_src elisp
(setq org-directory "~/org/")
#+end_src

** Disable line numbers for Org mode
#+begin_src elisp
(dolist (mode '(org-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Clock sound for org timer
#+begin_src elisp
(after! org
  (setq org-clock-sound "~/Music/ding.wav"))
#+end_src

** Defining A Few Things
#+begin_src elisp
;; Load org-faces to make sure we can set appropriate faces
(require 'org-faces)
;; Set reusable font name variables
(defvar my/fixed-width-font "JetBrainsMono Nerd Font"
  "The font to use for monospaced (fixed width) text.")

(defvar my/variable-width-font "Source Sans Pro"
  "The font to use for variable-pitch (document) text.")

;; NOTE: These settings might not be ideal for your machine, tweak them as needed!
;; (set-face-attribute 'default nil :font my/fixed-width-font :weight 'medium :height 90)
(set-face-attribute 'fixed-pitch nil :font my/fixed-width-font :weight 'medium :height 90)
(set-face-attribute 'variable-pitch nil :font my/variable-width-font :weight 'medium :height 1.1)

(defun efs/org-mode-setup ()
  (org-indent-mode)
  ;; (variable-pitch-mode 1)
  (visual-line-mode 1))

(defun efs/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.6)
                  (org-level-2 . 1.4)
                  (org-level-3 . 1.2)
                  (org-level-4 . 1.2)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font my/variable-width-font :weight 'medium :height (cdr face)))
  ;; Make the document title a bit bigger
  (set-face-attribute 'org-document-title nil :font my/variable-width-font :weight 'bold :height 1.3)

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil :font my/fixed-width-font :inherit 'fixed-pitch)
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

(use-package! org
  :hook (org-mode . efs/org-mode-setup)
  :config
  (setq org-ellipsis " ▼ ")
  (setq org-log-done 'time)
  (setq org-default-priority 67)
  (setq org-hide-emphasis-markers t)
  (efs/org-font-setup))
#+end_src

** Image
Use the actual width of image in org files

#+begin_src elisp
(setq org-image-actual-width nil)
#+end_src

** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src elisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Fancy Priority
Org-fancy-priorities give us some prettier priorities

#+begin_src elisp
(use-package org-fancy-priorities
  :hook
  (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list '((?A . "[‼]")
                                    (?B . "[❗]")
                                    (?C . "[☕]")
                                    (?D . "[♨]")
                                    (?1 . "[⚡]")
                                    (?2 . "[⮬]")
                                    (?3 . "[⮮]")
                                    (?4 . "[☕]")
                                    (?I . "[IMPORTANT]"))))
#+end_src

** Keyword TODO
Use custom TODO keywords for Org files.
Three different sequences:
    + Text
    + Emoji + Text
    + Items

#+begin_src elisp
(after! org
    (setq org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
        '((sequence
            "TODO(t)"             ; A task that is ready to be tackled
            "IN-PROGRESS(i)"      ; A task that is in progress
            "HOLD(h)"             ; Something is holding up this task
            "|"                   ; The pipe necessary to separate "active" states and "inactive" states
            "DONE(d)"             ; Task has been completed
            "CANCELLED(c)" )      ; Task has been cancelled
          (sequence
            "🚩TODO(f)"           ; A task that is ready to be tackled
            "👷🏻IN-PROGRESS(w)"    ; A task that is in progress
            "🔒HOLD(l)"           ; Something is holding up this task
            "|"                   ; The pipe necessary to separate "active" states and "inactive" states
            "✔DONE(e)"           ; Task has been completed
            "❌CANCELLED(x)" )
          (sequence
           "[ ](T)"               ; A task that is ready tobe tackled
           "[-](I)"               ; A task that is already started
           "[?](H)"               ; A task that is holding up by a reason ?
           "|"                    ; The pipe necessary to separate "active" states and "inactive" states
           "[X](D)" ))))          ; Tash has been completed

#+end_src

Configure style of TODO keywords
#+begin_src elisp
(after! org
  (setq org-todo-keyword-faces
    '(("IN-PROGRESS" . (:foreground "#b7a1f5" :weight: bold )) ("HOLD" . org-warning)
      ("[ ]" . (:foreground "#82b66a" :weight: bold)) ("[-]" . (:foreground "#b7a1f5" :weight: bold ))
      ("[?]" . org-warning)
      ("👷🏻IN-PROGRESS" . (:foreground "#b7a1f5" :weight: bold )) ("🔒HOLD" . org-warning))))
#+end_src

* ORG-PRESENT
For a better looking in present, use the =visual-fill-mode=
#+begin_src elisp
;; Configure fill width
(setq visual-fill-column-width 110
      visual-fill-column-center-text t)

(defun my/org-present-start ()
  ;; Center the presentation and wrap lines
  (visual-fill-column-mode 1)
  (visual-line-mode 1))

(defun my/org-present-end ()
  ;; Stop centering the document
  (visual-fill-column-mode 0)
  (visual-line-mode 0))

;; Register hooks with org-present
(add-hook 'org-present-mode-hook 'my/org-present-start)
(add-hook 'org-present-mode-quit-hook 'my/org-present-end)
#+end_src

* ORG-AGENDA
** View
Change agenda view:
    - At top, the #A Priority
    - In the middle the week view
    - At the bottom list todo task

#+begin_src elisp
(after! org
    (setq org-agenda-custom-commands
        '(("c" "Simple agenda view"
            ((tags "PRIORITY=\"A\""
                    ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                    (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (agenda "")
            (alltodo ""))))))
#+end_src

* ORG-ROAM
Configuration for org-roam:
 + Private location
 + New Capture templates

#+begin_src elisp
(after! org
  :ensure-t
  :custom
  (setq org-roam-directory "~/RoamNotes")
  (setq org-roam-index-file "~/RoamNotes/index.org")
  (setq org-roam-capture-templates '(("d" "default" plain "%?"
                                      :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                                                         "#+title: ${title}\n") :unnarrowed t)
                                     ("p" "problems" plain "\n* [[id:f23824a1-0515-47c6-b386-21d83a9aec21][PROBLEM]]\n%?\n* SOLVING"
                                      :target (file+head "problems/%<%Y%m%d%H%M%S>-${slug}.org"
                                                         "#+title: ${title}\n#+filetags: :Problem:\n") :unnarrowed t))))
#+end_src

** Org-Roam UI
#+begin_src elisp
(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam ;; or :after org
  ;; :hook (after-init . org-roam-ui-mode) ;; to launch server at start
  :config
  (setq org-roam-ui-follow t
        org-roam-ui-sync-theme t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src

* ORG-GCAL
Synchronize google calendar with org

#+begin_src elisp
(setq org-gcal-client-id "809125859117-d4lsgmmpri4bmefhrj2n22uqn63gdf42.apps.googleusercontent.com"
      org-gcal-client-secret "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"
      org-gcal-fetch-file-alist '(("corentin33210@gmail.com" .  "~/org/schedule.org")))
(require 'org-gcal)
#+end_src

* SEARCH WITH REGEX
Specify can search via regex

#+begin_src elisp
(require 'ivy)
(require 'counsel)

(setq ivy-re-builders-alist
      '((counsel-rg . ivy--regex-plus)
        (swiper . ivy--regex-plus)
        (swiper-isearch . ivy--regex-plus)
        (t . ivy--regex-ignore-order)))
#+end_src

* MOUSE SCROLLING
Emacs' default scrolling is annoying because of the sudden half-page jumps.  Also, I wanted to adjust the scrolling speed.

#+begin_src emacs-lisp
(setq scroll-conservatively 101) ;; value greater than 100 gets rid of half page jumping
(setq mouse-wheel-scroll-amount '(3 ((shift) . 3))) ;; how many lines at a time
(setq mouse-wheel-progressive-speed t) ;; accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
#+end_src

* TREEMACS
#+begin_src elisp
(use-package treemacs
  :defer t
  :config
  ;; Add ignored files and file extensions
  (setq treemacs-file-ignore-extensions '("o" "gcna" "gcdo" "vscode" "idea")
        treemacs-file-ignore-globs nil)
  (defun my-treemacs-ignore-filter (file full-path)
    "Ignore files specified by `treemacs-file-ignore-extensions' and globs."
    (or (member (file-name-extension file) treemacs-file-ignore-extensions)
        (cl-loop for glob in treemacs-file-ignore-globs
                 thereis (file-name-match-glob glob full-path))))
  (add-to-list 'treemacs-ignored-file-predicates #'my-treemacs-ignore-filter)

  ;; Enable follow mode
  (treemacs-follow-mode t)

  ;; Set treemacs theme
  (setq doom-themes-treemacs-theme "doom-colors"))
#+end_src

* PYTHON
** Black For Python Format
#+begin_src elisp
(use-package! python-black
  :demand t
  :after python
  :config
  (add-hook! 'python-mode-hook #'python-black-on-save-mode)
  (map! :leader :desc "Blacken Buffer" "m b b" #'python-black-buffer)
  (map! :leader :desc "Blacken Region" "m b r" #'python-black-region)
  (map! :leader :desc "Blacken Statement" "m b s" #'python-black-statement)
  )
#+end_src

* WEB
** REACT
*** Add Web Mode To React
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.js[x]?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.ts[x]?\\'" . web-mode))
#+END_SRC

** ASTRO
*** Add Web Mode To Astro File
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.astro\\'" . web-mode))
#+END_SRC

** HTML.ERB
*** Add ERB to lsp-mode
#+BEGIN_SRC emacs-lisp
(after! lsp-mode
  (add-to-list 'lsp-language-id-configuration '(".*\\.html\\.erb$" . "html"))
  (setq lsp-ui-sideline-show-code-actions t))
#+END_SRC

*** Add Web Mode to ERB template and disable format on save
#+BEGIN_SRC emacs-lisp
(add-hook! 'web-mode-hook
  (when (string-match-p "\\.erb\\'" buffer-file-name)
    (setq +format-with :none)))
#+END_SRC


** CUSTOM WEB-MODE
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :custom
  (web-mode-markup-indent-offset 2)
  (web-mode-css-indent-offset 2)
  (web-mode-code-indent-offset 2)
  :config
  (setq web-mode-tag-auto-close-style 1))
#+END_SRC

** RJSX MINOR MODE
*** Add Hook Function for JSX and TSX files
#+BEGIN_SRC emacs-lisp
(defun enable-rjsx-mode ()
  (when (or (string-equal "jsx" (file-name-extension buffer-file-name))
            (string-equal "tsx" (file-name-extension buffer-file-name)))
    (rjsx-minor-mode)))

(add-hook 'web-mode-hook #'enable-rjsx-mode)
#+END_SRC

** PRETTIER-RC
*** Add Hook Function for JSX and TSX files
#+BEGIN_SRC emacs-lisp
(defun enable-prettier-mode ()
  (when (or (string-equal "jsx" (file-name-extension buffer-file-name))
            (string-equal "tsx" (file-name-extension buffer-file-name)))
    (prettier-rc-mode)))

(add-hook 'web-mode-hook #'enable-prettier-mode)
#+END_SRC

* CENTAUR-TABS
** To fix centaur tabs in emacsclient
#+begin_src elisp
(after! centaur-tabs
  (setq centaur-tabs-set-bar 'right))
#+end_src

** Add Custom map
Keymap to turn ON/OFF centaur tabs

#+begin_src elisp
(map! :leader
      :desc "Toggle Centaur Tabs" "t a" #'centaur-tabs-mode)
#+end_src

** Move Between Buffer
Key mapping to move previous and next buffer with and without centaur-tabs

*** Default
#+begin_src elisp
(map! :ni "C-," #'previous-buffer)
(map! :ni "C-;" #'next-buffer)
#+end_src

*** Centaur Tabs
If Centaur Tabs is loaded map this key to switch between tabs instead of buffers

#+begin_src elisp
(eval-after-load 'centaur-tabs
    (map! :ni "C-," #'centaur-tabs-backward))
(eval-after-load 'centaur-tabs
    (map! :ni "C-;" #'centaur-tabs-forward))
#+end_src

* CRYSTAL
At the moment, lsp-mode only knows about scry as the Crystal language server.
So, to get it working with crystalline we need to configure lsp-mode to look for crystalline.

#+begin_src elisp
(with-eval-after-load 'lsp-mode
  (add-to-list 'lsp-language-id-configuration
               '(crystal-mode . "crystal"))
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection '("crystalline"))
                    :activation-fn (lsp-activate-on "crystal")
                    :priority '1
                    :server-id 'crystalline)))
#+end_src

* IMPORT OTHER CONFIG
Use external rails config, for snippet and method to navigate easily in rails project

#+begin_src elisp
(load (expand-file-name "rails-settings.el" doom-user-dir))
(load (expand-file-name "crystal-settings.el" doom-user-dir))
#+end_src

* INFORMATION
 Whenever you reconfigure a package, make sure to wrap your config in an
 `after!' block, otherwise Doom's defaults may override your settings. E.g.

   (after! PACKAGE
     (setq x y))

 The exceptions to this rule:

   - Setting file/directory variables (like `org-directory')
   - Setting variables which explicitly tell you to set them before their
     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
   - Setting doom variables (which start with 'doom-' or '+').

 Here are some additional functions/macros that will help you configure Doom.

 - `load!' for loading external *.el files relative to this one
 - `use-package!' for configuring packages
 - `after!' for running code after a package has loaded
 - `add-load-path!' for adding directories to the `load-path', relative to
   this file. Emacs searches the `load-path' when you load packages with
   `require' or `use-package'.
 - `map!' for binding new keys

 To get information about any of these functions/macros, move the cursor over
 the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
 This will open documentation for it, including demos of how they are used.
 Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
 etc).
 You can also try 'gd' (or 'C-c c d') to jump to their definition and see how

 they are implemented.
