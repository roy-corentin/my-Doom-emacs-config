#+TITLE: JilkoniX Doom Emacs Config
#+AUTHOR Corentin ROY (JilkoniX)
#+PROPERTY: header-args :tangle config.el
#+STARTUP: showeverything
#+EXPORT_FILE_NAME: ~/Org/html/config.html

* TABLE OF CONTENTS  :TOC:
- [[#init][INIT]]
- [[#about-this-config][ABOUT THIS CONFIG]]
- [[#startup-performance][STARTUP PERFORMANCE]]
  - [[#garbage-collection][Garbage Collection]]
  - [[#native-compilation-priority][Native Compilation Priority]]
- [[#dashboard][DASHBOARD]]
  - [[#splash-screen][Splash Screen]]
  - [[#dashboard-in-emacsclient][Dashboard in Emacsclient]]
- [[#font][FONT]]
- [[#theme][THEME]]
  - [[#doom-theme][Doom Theme]]
- [[#line-setup][LINE SETUP]]
- [[#corfu][CORFU]]
  - [[#keybinding][Keybinding]]
  - [[#icons][Icons]]
- [[#file-manager-dired][FILE MANAGER (DIRED)]]
  - [[#keybindings-to-open-dired][Keybindings To Open Dired]]
  - [[#keybindings-within-dired][Keybindings Within Dired]]
  - [[#keybindings-for-peep-dired-mode][Keybindings For Peep-Dired-Mode]]
- [[#evil-mode][EVIL-MODE]]
  - [[#cursor][Cursor]]
  - [[#killing][Killing]]
- [[#drag-stuff][DRAG STUFF]]
- [[#olivetti][OLIVETTI]]
  - [[#default-width][Default Width]]
  - [[#keybinding-1][Keybinding]]
- [[#magit][MAGIT]]
- [[#textmode][TEXTMODE]]
- [[#org][ORG]]
  - [[#org-buffer-creation][Org buffer creation]]
  - [[#org-location][Org location]]
  - [[#clock-sound-for-org-timer][Clock sound for org timer]]
  - [[#defining-a-few-things][Defining A Few Things]]
  - [[#org-emphasis][Org-Emphasis]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#keyword-todo][Keyword TODO]]
  - [[#pretty-tags-svg-tag-mode][Pretty Tags SVG-TAG-MODE]]
  - [[#ligature-for-org-mode][Ligature For Org Mode]]
- [[#org-agenda][ORG-AGENDA]]
  - [[#view][View]]
  - [[#french-holidays][French Holidays]]
  - [[#auto-refresh][Auto Refresh]]
- [[#org-roam][ORG-ROAM]]
  - [[#org-roam-ui][Org-Roam UI]]
  - [[#org-note][Org-Note]]
- [[#org-ai][ORG-AI]]
- [[#which-key][WHICH-KEY]]
- [[#mouse-scrolling][MOUSE SCROLLING]]
- [[#treemacs][TREEMACS]]
  - [[#config][Config]]
- [[#treesit][TREESIT]]
  - [[#language-sources][Language Sources]]
  - [[#treesit-auto][Treesit-Auto]]
- [[#web][WEB]]
  - [[#htmlerb][HTML.ERB]]
  - [[#custom-web-mode][CUSTOM WEB-MODE]]
- [[#tabs][TABS]]
  - [[#keybinding-centaur-tabs][Keybinding Centaur-Tabs]]
  - [[#move-between-tabs][Move Between Tabs]]
- [[#lsp-mode][LSP-MODE]]
  - [[#config-1][Config]]
  - [[#emacs-lsp-booster][Emacs-lsp-booster]]
- [[#projectile][PROJECTILE]]
- [[#xeft][XEFT]]
- [[#copilot][COPILOT]]
- [[#helm][HELM]]
- [[#elixir-ts][ELIXIR-TS]]
- [[#blamer][BLAMER]]
- [[#arduino][ARDUINO]]
- [[#chrome-emacs][CHROME-EMACS]]
- [[#import-other-config][IMPORT OTHER CONFIG]]
- [[#information][INFORMATION]]

* INIT
Place your private configuration here! Remember, you do not need to run 'doom sync' after modifying this file!


Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. It is optional.
#+begin_src elisp :results silent
(setq! user-full-name "Corentin Roy"
       user-mail-address "corentin.roy02@laposte.net")
#+end_src

* ABOUT THIS CONFIG
This is my personal Doom Emacs config. I use Doom Emacs for all my project so I need some configuration to be exactly like I want

* STARTUP PERFORMANCE
This section is where it make Emacs faster to load.

** Garbage Collection
Makes startup faster by reducing the frequency of garbage collection

#+begin_src emacs-lisp :results silent
;; Using garbage magic hack.
(use-package! gcmh
  :defer t
  :config
  (gcmh-mode 1))

;; Profile emacs startup
(add-hook! 'emacs-startup-hook
  (lambda ()
    (message "*** Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done)))
#+end_src

** Native Compilation Priority
Prefer newer files
#+begin_src emacs-lisp :results silent
(setq! load-prefer-newer noninteractive)
#+end_src

* DASHBOARD
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

** Splash Screen
How to set the img to show on dashboard
Example:
  ~(setq! fancy-splash-image "~/Pictures/Doom_Logo.png")~

** Dashboard in Emacsclient
This setting ensures that emacsclient always opens on *dashboard* rather than *scratch*.

#+begin_src emacs-lisp :results silent
(after! persp-mode
  (setq persp-emacsclient-init-frame-behaviour-override "main"))
#+end_src

* FONT
- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.
- `doom-unicode-font' -- for unicode glyphs
- `doom-serif-font' -- for the `fixed-pitch-serif' face

  See 'C-h v doom-font' for documentation and more examples of what they
  accept. For example:
  ~(setq!doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)~
        ~doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))~
 ~(setq!doom-font (font-spec :family "Hack Nerd Font" :size 13 :weight 'medium))~

#+begin_src elisp :results silent
(setq! doom-font (font-spec :family "JetBrains Mono Nerd Font" :size 14 :weight 'medium)
       doom-big-font (font-spec :family "JetBrains Mono Nerd Font" :size 24 :weight 'medium)
       doom-variable-pitch-font (font-spec :family "C059" :size 15 :weight 'regular))
       ;; doom-variable-pitch-font (font-spec :family "DejaVu Serif" :size 14 :weight 'medium))
#+end_src

To fix the font incrementation I increment by 1 instead of 2
#+begin_src elisp :results silent
(setq! doom-font-increment 1)
#+end_src

If you or Emacs can't find your font, use 'M-x describe-font' to look them
up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
refresh your font settings. If Emacs still can't find your font, it likely
wasn't installed correctly. Font issues are rarely Doom issues!

Enable bold and italic
#+begin_src elisp :results silent
(use-package! doom-themes
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
#+end_src

Comment and keyword in Italic for example "for"
#+begin_src elisp :results silent
(custom-set-faces!
  '(font-lock-comment-face nil :slant 'italic)
;;   '(font-lock-function-name-face nil :slant 'italic)
  '(font-lock-variable-name-face nil :slant 'italic))
#+end_src

* THEME
** Doom Theme
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

~(setq! doom-theme 'doom-monokai-machine)~
~(setq! doom-theme 'doom-henna)~
~(setq! doom-theme 'doom-one)~
~(setq! doom-theme 'doom-acario-dark)~
~(setq! doom-theme 'doom-dracula)~
~(setq! doom-theme 'doom-nord-aurora)~
~(setq! doom-theme 'doom-gruvbox)~

#+begin_src elisp :results silent
;; (setq! doom-theme 'ewal-doom-one)
(setq! doom-theme 'doom-moonlight)
#+end_src

* LINE SETUP
This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.
#+begin_src elisp :results silent
(setq! display-line-numbers-type `visual)
#+end_src

* CORFU
** Keybinding
| COMMAND        | DESCRIPTION     | KEYBINDING |
|----------------+-----------------+------------|
| corfu-complete | /Open candidates/ | M-TAB      |

#+begin_src emacs-lisp :results silent
(use-package! corfu
  :custom
  (corfu-preselect 'first)
  :bind (:map corfu-map
              ("M-TAB" . corfu-complete)
              ("M-<tab>" . corfu-complete)))
#+end_src

Doom emacs with =corfu= remap =evil insert tab= keybinding for =completion-at-point= but I prefer to =indent=
#+begin_src emacs-lisp :results silent :tangle no
(with-eval-after-load 'evil-maps
  (define-key evil-insert-state-map (kbd "<tab>") 'indent-for-tab-command))
#+end_src

** Icons
#+begin_src emacs-lisp :results silent
(load! "corfu-icons")
(setq! nerd-icons-corfu-mapping my-corfu-icons)
#+end_src

* FILE MANAGER (DIRED)
Dired is the file manager within Emacs.  Below, I setup keybindings for image previews (peep-dired).

** Keybindings To Open Dired
| COMMAND    | DESCRIPTION                        | KEYBINDING |
|------------+------------------------------------+------------|
| dired-jump | /Jump to current directory in dired/ | SPC d d    |

** Keybindings Within Dired
| COMMAND            | DESCRIPTION                                 | KEYBINDING |
|--------------------+---------------------------------------------+------------|
| dired-view-file    | /View file in dired/                          | g o        |
| dired-up-directory | /Go up in directory tree/                     | h          |
| dired-find-file    | /Go down in directory tree (or open if file)/ | l          |

** Keybindings For Peep-Dired-Mode
| COMMAND              | DESCRIPTION                              | KEYBINDING |
|----------------------+------------------------------------------+------------|
| peep-dired           | /Toggle previews within dired/             | M p        |
| peep-dired-next-file | /Move to next file in peep-dired-mode/     | j          |
| peep-dired-prev-file | /Move to previous file in peep-dired-mode/ | k          |

#+begin_src emacs-lisp :results silent
(with-eval-after-load 'dired
  (map! :leader
        (:prefix-map ("d" . "dired")
         :desc "Dired Jump Directory" "d" #'dired-jump))
  (define-key dired-mode-map (kbd "M-p") 'peep-dired)
  (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
  (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
  (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
  (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))

(add-hook! 'peep-dired-hook 'evil-normalize-keymaps)
;; ;; With dired-open plugin, you can launch external programs for certain extensions
;; ;; For example, I set all mp4 files to open in 'mpv'
(setq! dired-open-extensions '(("mkv" . "mpv")
                               ("mp4" . "mpv")))
#+end_src

* EVIL-MODE
** Cursor
- Cursor can move at the end of line
- Disable the cursor going back off when switch between Insert an Normal mode

#+begin_src elisp :results silent
(setq! evil-move-beyond-eol t
       evil-move-cursor-back nil)
#+end_src

** Killing
Don't put overwritten text by paste in the kill ring
#+begin_src elisp :results silent
(setq! evil-kill-on-visual-paste nil)
#+end_src

* DRAG STUFF
To move the cursor's line or the lines selected with visual-mode up or down

#+begin_src elisp :results silent
(map! "C-M-k" #'drag-stuff-up)
(map! "C-M-j" #'drag-stuff-down)
#+end_src


* OLIVETTI
** Default Width
Set a bigger width for Olivetti mode (original 90)
#+begin_src elisp :results silent
(setq! olivetti-body-width 120)
#+end_src

** Keybinding
Keybinding to toggle olivetti-mode
#+begin_src elisp :results silent
(map! :leader
      :desc "Toggle Olivetti Mode" "t o" #'olivetti-mode)
#+end_src

* MAGIT
Add olivetti mode to magit buffer
#+begin_src elisp :results silent
(add-hook! 'magit-mode-hook (olivetti-mode 1))
#+end_src

* TEXTMODE
#+begin_src elisp :results silent
(add-hook! 'text-mode-hook (olivetti-mode 1))
#+end_src

* ORG
** Org buffer creation
From tecosaur. Let's make creating an Org buffer just that little bit easier
#+begin_src elisp :results silent
(evil-define-command +evil-buffer-org-new (count file)
  "Creates a new ORG buffer replacing the current window, optionally
   editing a certain FILE"
  :repeat nil
  (interactive "P<f>")
  (if file
      (evil-edit file)
    (let ((buffer (generate-new-buffer "*new org*")))
      (set-window-buffer nil buffer)
      (with-current-buffer buffer
        (org-mode)
        (setq-local doom-real-buffer-p t)))))

(map! :leader
      (:prefix "b"
       :desc "New empty Org buffer" "o" #'+evil-buffer-org-new))
#+end_src

** Org location
If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!
#+begin_src elisp :results silent
(setq! org-directory "~/Dropbox/Org/")
#+end_src

** Clock sound for org timer
#+begin_src elisp :results silent
(after! org
  (setq org-clock-sound "~/Music/ding.wav"))
#+end_src

** Defining A Few Things
Load =org-faces= to make sure we can set appropriate faces

#+begin_src elisp :results silent
(require 'org-faces)

(defun efs/org-mode-setup ()
  (org-indent-mode)
  (mixed-pitch-mode 1)
  ;; (visual-fill-column-mode) ;; restrict lines size
  (olivetti-mode 1) ;; To center buffer as word text
  (visual-line-mode 1)) ;; Use visual line mode

(defun efs/org-font-setup ()
  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.6)
                  (org-level-2 . 1.4)
                  (org-level-3 . 1.2)
                  (org-level-4 . 1.2)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font doom-variable-pitch-font :weight 'medium :height (cdr face)))

  ;; Make the document title bigger
  (set-face-attribute 'org-document-title nil :font doom-variable-pitch-font :weight 'bold :height 2.1)

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground 'unspecified :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil :font doom-font :inherit 'fixed-pitch)
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src

Function to automatically get node done if it's children are done
#+begin_src elisp :results silent
(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries of a TODO are done, to TODO otherwise."
  (when (member (org-get-todo-state) org-todo-keywords-1)
    (let (org-log-done org-todo-log-states)   ; turn off logging
      (org-todo (if (= n-not-done 0) "DONE" "TODO")))))
#+end_src

#+begin_src elisp :results silent
(use-package! org
  :defer t
  :hook (org-mode . efs/org-mode-setup) (org-mode . efs/org-font-setup)
  :config
  (setq org-ellipsis " ▼ "
        org-log-done 'time
        org-default-priority 67
        org-hide-emphasis-markers t
        org-hierarchical-todo-statistics nil
        org-image-actual-width nil) ;; Use the actual image's size in org files
  (add-hook 'org-after-todo-statistics-hook #'org-summary-todo))
#+end_src

** Org-Emphasis
#+begin_src elisp :results silent
(defface my-org-emphasis-bold
  '((default :inherit bold)
    (((class color) (min-colors 88) (background light))
     :foreground "#a60000")
    (((class color) (min-colors 88) (background dark))
     :foreground "#ff8059"))
  "My bold emphasis for Org.")

(after! org
  (setq org-emphasis-alist
        '(("*" my-org-emphasis-bold)
          ("/" italic)
          ("_" underline)
          ("=" org-verbatim verbatim)
          ("~" org-code verbatim)
          ("+" (:strike-through t)))))
#+end_src

** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src elisp :results silent
(use-package! org-bullets
  :defer t
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Keyword TODO
Use custom TODO keywords for Org files.
Three different sequences:
+ Text
+ Emoji + Text
+ Items

#+begin_src elisp :results silent
(after! org
  (setq org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
        '((sequence
           "TODO(t)"             ; A task that is ready to be tackled
           "IN-PROGRESS(i)"      ; A task that is in progress
           "HOLD(h)"             ; Something is holding up this task
           "|"                   ; The pipe necessary to separate "active" states and "inactive" states
           "DONE(d)"             ; Task has been completed
           "CANCELED(c)" )      ; Task has been canceled
          (sequence
           "🚩TODO(f)"           ; A task that is ready to be tackled
           "👷🏻IN-PROGRESS(w)"    ; A task that is in progress
           "🔒HOLD(l)"           ; Something is holding up this task
           "|"                   ; The pipe necessary to separate "active" states and "inactive" states
           "✔DONE(e)"           ; Task has been completed
           "❌CANCELED(x)" )
          (sequence
           "[ ](T)"               ; A task that is ready tobe tackled
           "[-](I)"               ; A task that is already started
           "[?](H)"               ; A task that is holding up by a reason ?
           "|"                    ; The pipe necessary to separate "active" states and "inactive" states
           "[X](D)" ))))          ; Tash has been completed

#+end_src

Configure style of specific TODO keywords
#+begin_src elisp :results silent
(after! org
  (setq org-todo-keyword-faces
        '(("IN-PROGRESS" . (:foreground "#b7a1f5" :weight bold )) ("HOLD" . org-warning)
          ("[ ]" . (:foreground "#82b66a" :weight bold)) ("[-]" . (:foreground "#b7a1f5" :weight bold ))
          ("[?]" . org-warning)
          ("👷🏻IN-PROGRESS" . (:foreground "#b7a1f5" :weight bold )) ("🔒HOLD" . org-warning))))
#+end_src

** Pretty Tags SVG-TAG-MODE
#+begin_src elisp :results silent
(defun royco/set-svg-tag-tags-for-org-mode ()
  "Set the SVG tags for `org-mode'."
  (when (display-graphic-p)
    (setq-local svg-tag-tags
                '(
                  ;; Org tags
                  ("\\(:[A-Z_]+:\\)" . ((lambda (tag)
                                          (svg-tag-make tag :beg 1 :end -1 :margin 1.5))))
                  ("\\(:[A-Z_]+:\\)$" . ((lambda (tag)
                                           (svg-tag-make tag :beg 1 :end -1 :margin 1.5))))
                  ;; TODOS/DONES
                  ("\\(TODO\\)" . ((lambda (tag)
                                     (svg-tag-make tag :inverse t :face 'org-todo))))
                  ("\\(DONE\\)" . ((lambda (tag)
                                     (svg-tag-make tag :inverse t :face 'org-done))))
                  ("\\(IN-PROGRESS\\)" . ((lambda (tag)
                                            (svg-tag-make tag :inverse t :face '+org-todo-active))))
                  ("\\(HOLD\\)" . ((lambda (tag)
                                     (svg-tag-make tag :inverse t :face '+org-todo-onhold))))
                  ("\\(CANCELED\\)" . ((lambda (tag)
                                         (svg-tag-make tag :inverse t :face '+org-todo-cancel))))
                  ;; Log Date
                  ("\\(\\[[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}\s[A-Za-z]\\{3\\}\.\s[0-9]\\{2\\}:[0-9]\\{2\\}\\]\\)"
                   . ((lambda (tag)
                        (svg-tag-make tag :beg 0 :end -1 :face 'org-date))))
                  ))
    (svg-tag-mode 1)))

(use-package! svg-tag-mode
  :after org
  :init
  (add-hook 'org-mode-hook  #'royco/set-svg-tag-tags-for-org-mode)
  :config
  (plist-put svg-lib-style-default :font-family "JetBrainsMono Nerd Font")
  (plist-put svg-lib-style-default :height 1.2)
  (plist-put svg-lib-style-default :padding 2)
  (plist-put svg-lib-style-default :font-size 10))
#+end_src

** Ligature For Org Mode
#+begin_src elisp :results silent
(add-hook 'org-mode-hook (lambda ()
                           "Beautify Org Checkbox Symbol"
                           (push '("[ ]" .  "☐") prettify-symbols-alist)
                           (push '("[X]" . "☑" ) prettify-symbols-alist)
                           (push '("[-]" . "❍" ) prettify-symbols-alist)
                           (push '("#+BEGIN_SRC" . "↦" ) prettify-symbols-alist)
                           (push '("#+END_SRC" . "⇤" ) prettify-symbols-alist)
                           (push '("#+begin_src" . "↦" ) prettify-symbols-alist)
                           (push '("#+end_src" . "⇤" ) prettify-symbols-alist)
                           (push '("#+BEGIN_EXAMPLE" . "↦" ) prettify-symbols-alist)
                           (push '("#+END_EXAMPLE" . "⇤" ) prettify-symbols-alist)
                           (push '("#+begin_example" . "↦" ) prettify-symbols-alist)
                           (push '("#+end_example" . "⇤" ) prettify-symbols-alist)
                           (push '("#+BEGIN_QUOTE" . "↦" ) prettify-symbols-alist)
                           (push '("#+END_QUOTE" . "⇤" ) prettify-symbols-alist)
                           (push '("#+begin_quote" . "󱆧" ) prettify-symbols-alist)
                           (push '("#+end_quote" . "󱆨⇤" ) prettify-symbols-alist)
                           (push '("#+TITLE:" . "") prettify-symbols-alist)
                           (push '("#+title:" . "") prettify-symbols-alist)
                           (push '("#+DESCRIPTION:" . "󰦨") prettify-symbols-alist)
                           (push '("#+ID:" . "") prettify-symbols-alist)
                           (push '("#+FILETAGS:" . "") prettify-symbols-alist)
                           (push '("#+filetags:" . "") prettify-symbols-alist)
                           (push '("#+STARTUP:" . "󰈈") prettify-symbols-alist)
                           (push '("#+startup:" . "󰈈") prettify-symbols-alist)
                           (push '("#+ACTIVE:" . "") prettify-symbols-alist)
                           (push '("#+START_SPOILER" . "") prettify-symbols-alist)
                           (push '("#+CLOSE_SPOILER" . "") prettify-symbols-alist)
                           (push '("#+BEGIN_HIDDEN" . "󰘓") prettify-symbols-alist)
                           (push '("#+END_HIDDEN" . "󰘓") prettify-symbols-alist)
                           (push '("#+author" . "") prettify-symbols-alist)
                           (push '("#+AUTHOR" . "") prettify-symbols-alist)
                           (push '("#+property:" . "") prettify-symbols-alist)
                           (push '("#+PROPERTY:" . "") prettify-symbols-alist)
                           (prettify-symbols-mode)))
#+end_src

* ORG-AGENDA
** View
+ Add curstom agenda view =c=:
  - At top, the =#A= Priority
  - The =#B= Priority
  - In the middle the week view
  - Today logs
  - At the bottom list of all todo task

+ Add custom agendar view =d=:
  - Done of the month

#+begin_src elisp :results silent
(after! org
  (setq org-agenda-start-with-log-mode t)
  (setq org-agenda-custom-commands
        '(("c" "Simple agenda view"
           ((tags-todo "+PRIORITY=\"A\""
                       ((org-agenda-overriding-header "High-priority unfinished tasks:")))
            (tags-todo "+PRIORITY=\"B\""
                       ((org-agenda-overriding-header "Priority unfinished tasks:")))
            (agenda "" ((org-agenda-prefix-format "%-15T\t%s [ ] ")
                        (org-agenda-todo-keyword-format "")
                        (org-agenda-start-on-weekday nil)
                        (org-deadline-warning-days 60)
                        (org-agenda-start-day "0d")
                        (org-agenda-start-with-log-mode nil)
                        (org-agenda-skip-scheduled-if-deadline-is-shown t)
                        (org-agenda-log-mode-items '(state))
                        (org-agenda-overriding-header "Week Todo")))
            (agenda "" ((org-agenda-prefix-format "%-15:T\t%?-12t [X] ")
                        (org-agenda-todo-keyword-format "")
                        (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'scheduled 'deadline))
                        (org-agenda-start-on-weekday nil)
                        (org-agenda-archives-mode t)
                        (org-agenda-start-day "0d")
                        (org-agenda-span 1)
                        (org-agenda-start-with-log-mode 'only)
                        (org-agenda-log-mode-items '(closed clock state))
                        (org-agenda-overriding-header "Today")))
            (agenda "" ((org-agenda-prefix-format "%-15T\t%s [ ] ")
                        (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'scheduled 'deadline))
                        (org-agenda-log-mode-items '(closed state))
                        (org-agenda-archives-mode t)
                        (org-agenda-start-day "-7d")
                        (org-agenda-start-with-log-mode nil)
                        (org-agenda-overriding-header "Week Done")))
            (alltodo "")))
          ("d" "Done of the month"
           ((agenda "" ((org-agenda-prefix-format "%-15:T\t%t [X] ")
                        (org-agenda-todo-keyword-format "")
                        (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'scheduled 'deadline))
                        (org-agenda-start-with-log-mode 'only)
                        (org-agenda-log-mode-items '(closed clock state))
                        (org-agenda-time-grid nil)
                        (org-agenda-span 31)
                        (org-agenda-start-day "-30d")
                        (org-agenda-archives-mode t)
                        (org-agenda-start-on-weekday nil))))))))
#+end_src

** French Holidays
#+begin_src elisp :results silent
(after! org
  (defvar holiday-french-holidays nil
    "French holidays")

  (setq holiday-french-holidays
        `((holiday-fixed 1 1 "Jour de l'an")
          (holiday-fixed 1 6 "Épiphanie")
          (holiday-fixed 2 2 "Chandeleur")
          (holiday-fixed 2 14 "Saint Valentin")
          (holiday-fixed 5 1 "Fête du travail")
          (holiday-fixed 5 8 "Commémoration de la capitulation de l'Allemagne en 1945")
          (holiday-fixed 6 21 "Fête de la musique")
          (holiday-fixed 7 14 "Fête nationale - Prise de la Bastille")
          (holiday-fixed 8 15 "Assomption (Religieux)")
          (holiday-fixed 11 11 "Armistice de 1918")
          (holiday-fixed 11 1 "Toussaint")
          (holiday-fixed 11 2 "Commémoration des fidèles défunts")
          (holiday-fixed 12 25 "Noël")
          ;; fetes a date variable
          (holiday-easter-etc 0 "Pâques")
          (holiday-easter-etc 1 "Lundi de Pâques")
          (holiday-easter-etc 39 "Ascension")
          (holiday-easter-etc 49 "Pentecôte")
          (holiday-easter-etc -47 "Mardi gras")
          (holiday-float 5 0 4 "Fête des mères")
          ;; dernier dimanche de mai ou premier dimanche de juin si c'est le
          ;; même jour que la pentecôte
          (holiday-float 6 0 3 "Fête des pères"))) ;; troisième dimanche de juin

  (setq calendar-holidays holiday-french-holidays))
#+end_src

** Auto Refresh
Auto refresh =Org Agenda= buffer when org file updated

#+begin_src elisp :results silent
(defun org-agenda-auto-refresh-agenda-buffer ()
  "If we're in an agenda file, and there is an agenda buffer, refresh it."
  (when (org-agenda-file-p)
    (when-let ((buffer (get-buffer org-agenda-buffer-name)))
      (with-current-buffer buffer
        (org-agenda-redo-all)))))


(after! org
  (add-hook 'after-revert-hook #'org-agenda-auto-refresh-agenda-buffer))
#+end_src

* ORG-ROAM
Configuration for org-roam:
+ Private location
+ New Capture templates

#+begin_src elisp :results silent
(use-package! org-roam
  :custom
  (org-roam-directory "~/Dropbox/RoamNotes")
  (org-roam-index-file "~/Dropbox/RoamNotes/index.org")
  (org-roam-capture-templates
   `(("d" " Default" plain
      "%?"
      :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                         "#+title: ${title}\n")
      :unnarrowed t)
     ("p" " Problems" plain
      "* [[id:f23824a1-0515-47c6-b386-21d83a9aec21][PROBLEM]]\n%?\n* SOLVING"
      :target (file+head "problems/content/%<%Y%m%d%H%M%S>-${slug}.org"
                         "#+title: ${title}\n#+filetags: :PROBLEM:\n")
      :unnarrowed t)
     ("a", "󰙅 DataStructure" plain
      "A =${title}= [[id:92421051-83c3-4117-9c25-7f4f9ecf2c0a][Data Structure]] is %?"
      :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                         "#+title: ${title}\n#+filetags: :DATASTRUCTURE:\n")
      :unnarrowed t))))
#+end_src

** Org-Roam UI
#+begin_src elisp :results silent
(use-package! websocket
  :defer t
  :after org-roam)

(use-package! org-roam-ui
  :defer t
  :after org-roam ;; or :after org
  :hook (after-init . org-roam-ui-mode)
  :config
  (setq org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start nil))
#+end_src

** Org-Note
Use of ~Org-Note~ to see notes on phone
#+begin_src elisp :result silent
(use-package! orgnote
  :defer t
  :hook (org-mode . orgnote-sync-mode))
#+end_src

* ORG-AI
#+begin_src elisp :results silent
(use-package! org-ai
  :commands (org-ai-mode
             org-ai-global-mode)
  :init
  (add-hook 'org-mode-hook #'org-ai-mode) ; enable org-ai in org-mode
  (org-ai-global-mode) ; installs global keybindings on C-c M-a
  :config
  (setq org-ai-default-chat-model "gpt-3.5-turbo") ; if you are on the gpt-4 beta:
  (org-ai-install-yasnippets)) ; if you are using yasnippet and want `ai` snippets
#+end_src

* WHICH-KEY
I also think that having evil- appear in so many popups is a bit too verbose, let’s change that, and do a few other similar tweaks while we’re at it.

#+begin_src elisp :results silent
(setq! which-key-allow-multiple-replacements t)
(after! which-key
  (pushnew!
   which-key-replacement-alist
   '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . "◂\\1"))
   '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . "◃\\1"))
   ))
#+end_src

* MOUSE SCROLLING
Emacs' default scrolling is annoying because of the sudden half-page jumps.  Also, I wanted to adjust the scrolling speed.

#+begin_src emacs-lisp :results silent
(setq! scroll-conservatively 101) ;; value greater than 100 gets rid of half page jumping
(setq! mouse-wheel-scroll-amount '(3 ((shift) . 3))) ;; how many lines at a time
(setq! mouse-wheel-progressive-speed t) ;; accelerate scrolling
(setq! mouse-wheel-follow-mouse 't) ;; scroll window under mouse
#+end_src

* TREEMACS
** Config
#+begin_src elisp :results silent
(use-package! treemacs
  :defer t
  :config
  ;; Add ignored files and file extensions
  (setq treemacs-file-ignore-extensions '("o" "gcna" "gcdo" "vscode" "idea")
        treemacs-file-ignore-globs nil)
  (defun my-treemacs-ignore-filter (file full-path)
    "Ignore files specified by `treemacs-file-ignore-extensions' and globs."
    (or (member (file-name-extension file) treemacs-file-ignore-extensions)
        (cl-loop for glob in treemacs-file-ignore-globs
                 thereis (file-name-match-glob glob full-path))))
  (add-to-list 'treemacs-ignored-file-predicates #'my-treemacs-ignore-filter)

  ;; Enable follow mode
  (treemacs-follow-mode t)
  (lsp-treemacs-sync-mode t)

  ;; Set treemacs theme
  (setq doom-themes-treemacs-theme "doom-colors"))
#+end_src

* TREESIT
** Language Sources
#+begin_src elisp :results silent
(setq! treesit-language-source-alist
  '((bash "https://github.com/tree-sitter/tree-sitter-bash")
    (c "https://github.com/tree-sitter/tree-sitter-c")
    (cmake "https://github.com/uyha/tree-sitter-cmake")
    (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
    (css "https://github.com/tree-sitter/tree-sitter-css")
    (elisp "https://github.com/Wilfred/tree-sitter-elisp")
    (elixir "https://github.com/elixir-lang/tree-sitter-elixir")
    (go "https://github.com/tree-sitter/tree-sitter-go")
    (go-mod "https://github.com/camdencheek/tree-sitter-go-mod")
    (heex "https://github.com/phoenixframework/tree-sitter-heex")
    (html "https://github.com/tree-sitter/tree-sitter-html")
    (js . ("https://github.com/tree-sitter/tree-sitter-javascript" "master" "src"))
    (json "https://github.com/tree-sitter/tree-sitter-json")
    (make "https://github.com/alemuller/tree-sitter-make")
    (markdown "https://github.com/ikatyang/tree-sitter-markdown")
    (python "https://github.com/tree-sitter/tree-sitter-python")
    (rust "https://github.com/tree-sitter/tree-sitter-rust")
    (ruby "https://github.com/tree-sitter/tree-sitter-ruby")
    (toml "https://github.com/tree-sitter/tree-sitter-toml")
    (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src"))
    (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src"))
    (yaml "https://github.com/ikatyang/tree-sitter-yaml")
    (latex "https://github.com/latex-lsp/tree-sitter-latex")))
#+end_src

** Treesit-Auto
#+begin_src elisp :results silent
(use-package! treesit-auto
  :custom
  (treesit-auto-install 'prompt)
  :config
  (global-treesit-auto-mode))
#+end_src

#+begin_src elisp :results silent
(add-hook 'bash-ts-mode-hook #'lsp)
(add-hook 'c-ts-mode-hook #'lsp)
(add-hook 'cmake-ts-mode-hook #'lsp)
(add-hook 'c++-ts-mode-hook #'lsp)
(add-hook 'css-ts-mode-hook #'lsp)
(add-hook 'elisp-ts-mode-hook #'lsp)
(add-hook 'elixir-ts-mode-hook #'lsp)
(add-hook 'go-ts-mode-hook #'lsp)
(add-hook 'go-mod-ts-mode-hook #'lsp)
(add-hook 'html-ts-mode-hook #'lsp)
(add-hook 'javascript-ts-mode-hook #'lsp)
(add-hook 'json-ts-mode-hook #'lsp)
(add-hook 'make-ts-mode-hook #'lsp)
(add-hook 'markdown-ts-mode-hook #'lsp)
(add-hook 'python-ts-mode-hook #'lsp)
(add-hook 'rust-ts-mode-hook #'lsp)
(add-hook 'ruby-ts-mode-hook #'lsp)
(add-hook 'toml-ts-mode-hook #'lsp)
(add-hook 'tsx-ts-mode-hook #'lsp)
(add-hook 'typescript-ts-mode-hook #'lsp)
(add-hook 'yaml-ts-mode-hook #'lsp)
(add-hook 'yaml-ts-mode-hook #'lsp)
(add-hook 'latex-ts-mode-hook #'lsp)
#+end_src

* WEB
** HTML.ERB
*** Add ERB to lsp-mode
#+BEGIN_SRC emacs-lisp :results silent
(after! lsp-mode
  (add-to-list 'lsp-language-id-configuration '(".*\\.html\\.erb$" . "html"))
  (setq lsp-ui-sideline-show-code-actions t))
#+END_SRC

*** Add Web Mode to ERB template and disable format on save
#+BEGIN_SRC emacs-lisp :results silent
(add-hook! 'web-mode-hook
  (when (string-match-p "\\.erb\\'" buffer-file-name)
    (setq! +format-with :none)))
#+END_SRC

** CUSTOM WEB-MODE
#+BEGIN_SRC emacs-lisp :results silent
(use-package! web-mode
  :defer t
  :config
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-auto-close-style 2)
  (setq web-mode-enable-auto-closing 2))
#+END_SRC

* TABS
** Keybinding Centaur-Tabs
Keybinding to turn toggle centaur tabs mode

#+begin_src elisp :results silent :tangle no
(map! :leader
      :desc "Toggle Centaur Tabs" "t a" #'centaur-tabs-mode)
#+end_src

** Move Between Tabs
Keybinding to move at previous and next buffer

#+begin_src elisp :results silent :tangle no
(map! :ni "C-," #'+tabs:previous-or-goto)
(map! :ni "C-;" #'+tabs:next-or-goto)
#+end_src

#+begin_src elisp :results silent 
(map! :ni "C-," #'previous-buffer)
(map! :ni "C-;" #'next-buffer)
#+end_src

* LSP-MODE
** Config
If =lsp-log-io= set to true can cause a performance hit
- Refresh less often =lsp-idle= for performance
- Disable ~rubocop-ls~ to use ~ruby-lsp~

#+begin_src elisp :results silent
(use-package! lsp-mode
  :init
  (add-to-list 'exec-path "~/Applications/elixir-ls")
  :config
  (setq lsp-log-io nil
        lsp-idle-delay 0.5
        read-process-output-max (* 1024 1024)
        lsp-disabled-clients '(rubocop-ls)))
#+end_src

** Emacs-lsp-booster
Wrap lsp exec by emacs-lsp-booster

#+begin_src elisp :results silent
(after! lsp-mode
  (defun lsp-booster--advice-json-parse (old-fn &rest args)
    "Try to parse bytecode instead of json."
    (or
     (when (equal (following-char) ?#)
       (let ((bytecode (read (current-buffer))))
         (when (byte-code-function-p bytecode)
           (funcall bytecode))))
     (apply old-fn args)))
  (advice-add (if (progn (require 'json)
                         (fboundp 'json-parse-buffer))
                  'json-parse-buffer
                'json-read)
              :around
              #'lsp-booster--advice-json-parse)

  (defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
    "Prepend emacs-lsp-booster command to lsp CMD."
    (let ((orig-result (funcall old-fn cmd test?)))
      (if (and (not test?)                             ;; for check lsp-server-present?
               (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
               lsp-use-plists
               (not (functionp 'json-rpc-connection))  ;; native json-rpc
               (executable-find "emacs-lsp-booster"))
          (progn
            (message "Using emacs-lsp-booster for %s!" orig-result)
            (cons "emacs-lsp-booster" orig-result))
        orig-result)))
  (advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command))
#+end_src

* PROJECTILE
Permit projectile to create file if missing

#+begin_src elisp :results silent
(setq! projectile-create-missing-test-files t)
#+end_src

* XEFT
Usefull for looking through notes
#+begin_src elisp :results silent
(setq! xeft-directory "~/Dropbox/RoamNotes")
#+end_src

* COPILOT
Accept completion from copilot and fallback to company

#+begin_src elisp :results silent
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("C-TAB" . 'copilot-accept-completion)
              ("C-<tab>" . 'copilot-accept-completion)
              ("C-s-TAB" . 'copilot-accept-completion-by-word)
              ("C-s-<tab>" . 'copilot-accept-completion-by-word)))
#+end_src

* HELM
Fix issue that helm close other buffer when poping

#+begin_src elisp :results silent :tangle no
(setq helm-display-function #'pop-to-buffer)

(setq shackle-rules '(("\\`\\*helm.*?\\*\\'" :regexp t :align t :ratio 0.46)))
(shackle-mode)
#+end_src

* ELIXIR-TS
#+begin_src elisp :results silent
(use-package elixir-ts-mode)
#+end_src

* BLAMER
| COMMAND                          | DESCRIPTION                 | KEYBINDING |
|----------------------------------+-----------------------------+------------|
| blamer-show-posframe-commit-info | Open Popup with commit info | s-i        |
| global-blamer-mode               | Toggle blamer mode          | SPC g i    |

#+begin_src elisp :results silent
(use-package! blamer
  :bind (("s-i" . blamer-show-posframe-commit-info))
  :defer 20
  :custom
  (blamer-idle-time 0.3)
  (blamer-min-offset 70)
  :custom-face
  (blamer-face ((t :foreground "#7a88cf"
                    :background nil
                    :height 80
                    :italic t)))
  :config
  (global-blamer-mode 0))

(map! :leader
      :desc "Toggle blamer mode" "g i" #'global-blamer-mode)
#+end_src

* ARDUINO
#+begin_src elisp :results silent
(use-package arduino-cli-mode
  :hook arduino-mode
  :mode "\\.ino\\'"
  :custom
  (arduino-cli-warnings 'all)
  (arduino-cli-verify t))
#+end_src

* CHROME-EMACS
#+begin_src emacs-lisp :results silent
(use-package atomic-chrome
  :demand t
  :commands (atomic-chrome-start-server)
  :config
  (setq-default atomic-chrome-extension-type-list '(atomic-chrome))
  (atomic-chrome-start-server))
#+end_src

* IMPORT OTHER CONFIG
Use external rails config, for snippet and method to navigate easily in rails project

#+begin_src elisp :results silent
(load! (expand-file-name "rails-settings.el" doom-user-dir))
(load! (expand-file-name "perso.el" doom-user-dir))
#+end_src

* INFORMATION
Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.

(after! PACKAGE
(setq x y))

The exceptions to this rule:

- Setting file/directory variables (like `org-directory')
- Setting variables which explicitly tell you to set them before their
  package is loaded (see 'C-h v VARIABLE' to look up their documentation).
- Setting doom variables (which start with 'doom-' or '+').

  Here are some additional functions/macros that will help you configure Doom.

  - `load!' for loading external *.el files relative to this one
  - `use-package!' for configuring packages
  - `after!' for running code after a package has loaded
  - `add-load-path!' for adding directories to the `load-path', relative to
    this file. Emacs searches the `load-path' when you load packages with
    `require' or `use-package'.
  - `map!' for binding new keys

  To get information about any of these functions/macros, move the cursor over
  the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
  This will open documentation for it, including demos of how they are used.
  Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
  etc).
  You can also try 'gd' (or 'C-c c d') to jump to their definition and see how

  they are implemented.
