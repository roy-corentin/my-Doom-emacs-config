#+TITLE: JilkoniX Doom Emacs Config
#+AUTHOR Corentin ROY (JilkoniX)
#+PROPERTY: header-args :tangle config.el
#+STARTUP: showeverything
#+EXPORT_FILE_NAME: ~/Org/html/config.html

* TABLE OF CONTENTS  :TOC:
- [[#init][INIT]]
- [[#about-this-config][ABOUT THIS CONFIG]]
- [[#startup-performance][STARTUP PERFORMANCE]]
  - [[#garbage-collection][Garbage collection]]
  - [[#native-compil-priority][Native Compil Priority]]
- [[#dashboard][DASHBOARD]]
  - [[#splash-screen][Splash Screen]]
  - [[#dashboard-in-emacsclient][Dashboard in Emacsclient]]
- [[#emojis][EMOJIS]]
- [[#font][FONT]]
- [[#theme][THEME]]
  - [[#doom-theme][Doom Theme]]
  - [[#set-transparency][Set Transparency]]
  - [[#tab-width][Tab Width]]
- [[#line-setup][LINE SETUP]]
- [[#company][COMPANY]]
  - [[#add-tabnine-as-company-backends][Add TabNine As Company Backends]]
  - [[#configuration][Configuration]]
  - [[#customize-the-faces-of-company-mode][Customize the faces of Company mode]]
- [[#file-manager-dired][FILE MANAGER (DIRED)]]
  - [[#keybindings-to-open-dired][Keybindings To Open Dired]]
  - [[#keybindings-within-dired][Keybindings Within Dired]]
  - [[#keybindings-for-peep-dired-mode][Keybindings For Peep-Dired-Mode]]
- [[#cursor][CURSOR]]
- [[#drag-stuff][DRAG STUFF]]
- [[#org][ORG]]
  - [[#org-location][Org location]]
  - [[#clock-sound-for-org-timer][Clock sound for org timer]]
  - [[#olivetti][Olivetti]]
  - [[#defining-a-few-things][Defining A Few Things]]
  - [[#org-emphasis][Org-Emphasis]]
  - [[#image][Image]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#fancy-priority][Fancy Priority]]
  - [[#keyword-todo][Keyword TODO]]
- [[#org-agenda][ORG-AGENDA]]
  - [[#view][View]]
  - [[#french-holidays][French Holidays]]
  - [[#auto-refresh][Auto Refresh]]
- [[#org-roam][ORG-ROAM]]
  - [[#org-roam-ui][Org-Roam UI]]
- [[#org-gcal][ORG-GCAL]]
- [[#org-ai][ORG-AI]]
- [[#search-with-regex][SEARCH WITH REGEX]]
- [[#mouse-scrolling][MOUSE SCROLLING]]
- [[#treemacs][TREEMACS]]
  - [[#config][Config]]
- [[#web][WEB]]
  - [[#astro][ASTRO]]
  - [[#htmlerb][HTML.ERB]]
  - [[#custom-web-mode][CUSTOM WEB-MODE]]
- [[#centaur-tabs][CENTAUR-TABS]]
  - [[#to-fix-centaur-tabs-in-emacsclient][To fix centaur tabs in emacsclient]]
  - [[#add-custom-map][Add Custom map]]
  - [[#move-between-buffer][Move Between Buffer]]
- [[#lsp-mode][LSP-MODE]]
- [[#lsp-bridge][LSP-BRIDGE]]
- [[#projectile][PROJECTILE]]
- [[#xeft][XEFT]]
- [[#import-other-config][IMPORT OTHER CONFIG]]
- [[#information][INFORMATION]]

* INIT
Place your private configuration here! Remember, you do not need to run 'doom sync' after modifying this file!


Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. It is optional.
#+begin_src elisp :results silent
(setq! user-full-name "Corentin Roy"
       user-mail-address "corentin.roy02@laposte.net")
#+end_src

* ABOUT THIS CONFIG
This is my personal Doom Emacs config. I use Doom Emacs for all my project so I need some configuration to be exactly like I want

* STARTUP PERFORMANCE
This section is where it make Emacs faster to load.

** Garbage collection
Makes startup faster by reducing the frequency of garbage collection

#+begin_src emacs-lisp :results silent
;; Using garbage magic hack.
(use-package! gcmh
  :defer t
  :config
  (gcmh-mode 1))

;; Setting garbage collection threshold
(setq! gc-cons-threshold 402653184
       gc-cons-percentage 0.6)

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
;; Silence compiler warnings as they can be pretty disruptive (setq!comp-async-report-warnings-errors nil)
#+end_src

** Native Compil Priority
#+begin_src emacs-lisp :results silent
;; Prefer newer files
(setq! load-prefer-newer noninteractive)
#+end_src

* DASHBOARD
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

** Splash Screen
#+begin_src elisp :results silent
;; (setq! fancy-splash-image "~/Pictures/Doom_Logo.png")
;; (setq! fancy-splash-image "~/Pictures/cyberpunk_logo.png")
;; (setq! fancy-splash-image "~/Pictures/blackhole-lines.svg")
;; (setq! fancy-splash-image "~/Pictures/blackhole.svg")
#+end_src

** Dashboard in Emacsclient
This setting ensures that emacsclient always opens on *dashboard* rather than *scratch*.

#+begin_src emacs-lisp :results silent
(after! persp-mode
  (setq persp-emacsclient-init-frame-behaviour-override "main"))
#+end_src

* EMOJIS
Emojify is an Emacs extension to display emojis. It can display github style emojis like :smile: or plain ascii ones like :).

#+begin_src emacs-lisp :results silent
(use-package! emojify
  :defer t
  :hook (after-init . global-emojify-mode))
#+end_src

* FONT
- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.
- `doom-unicode-font' -- for unicode glyphs
- `doom-serif-font' -- for the `fixed-pitch-serif' face

  See 'C-h v doom-font' for documentation and more examples of what they
  accept. For example:

#+begin_src elisp :results silent
;;(setq!doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;; (setq!doom-font (font-spec :family "JetBrainsMono NF" :size 13 :weight 'light))
;; (setq!doom-font (font-spec :family "JetBrains Mono" :size 13 :weight 'light))
;; (setq!doom-font (font-spec :family "Hack Nerd Font" :size 13 :weight 'medium))
(setq! doom-font (font-spec :family "JetBrainsMono Nerd Font Mono" :size 13 :weight 'medium)
       doom-variable-pitch-font (font-spec :family "DejaVu Serif" :size 13 :weight 'medium))
(setq! doom-font-increment 1)
#+end_src

If you or Emacs can't find your font, use 'M-x describe-font' to look them
up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
refresh your font settings. If Emacs still can't find your font, it likely
wasn't installed correctly. Font issues are rarely Doom issues!

Enable bold and italic
#+begin_src elisp :results silent
(after! doom-themes
  (setq doom-themes-enable-bold t)
  (setq doom-themes-enable-italic t))
#+end_src

Comment and keyword in Italic for example "for"
#+begin_src elisp :results silent
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic)
  '(font-lock-function-name-face :slant italic))

#+end_src

Changes certain keywords to symbols, such as lamda!
#+begin_src elisp :results silent
;; (setq global-prettify-symbols-mode t)
#+end_src

* THEME
** Doom Theme
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:
#+begin_src elisp :results silent
;; (setq! doom-theme 'doom-monokai-machine)
;; (setq! doom-theme 'doom-henna)
;; (setq! doom-theme 'doom-one)
;; (setq! doom-theme 'doom-acario-dark)
;; (setq! doom-theme 'doom-dracula)
(setq! doom-theme 'doom-nord-aurora)
#+end_src

** Set Transparency
It Do not override transparency made by window compositor (ex: Hyprland)
#+begin_src elisp :results silent
(set-frame-parameter (selected-frame) 'alpha '(95 95))
(add-to-list 'default-frame-alist '(alpha 95 . 95))
#+end_src

** Tab Width
#+begin_src elisp :results silent
(setq! tab-width 2)
#+end_src

* LINE SETUP
This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.
#+begin_src elisp :results silent
(setq! display-line-numbers-type `relative)
#+end_src

* COMPANY
** Add TabNine As Company Backends
#+begin_src elisp :results silent
(require 'company-tabnine)
(add-to-list 'company-backends #'company-tabnine)
#+end_src

** Configuration
+ Show faster
+ Show when only one character is pressed
+ Use Text Icon instead of vscode icons
#+begin_src elisp :results silent
(setq! company-idle-delay 0
       company-minimum-prefix-length 1)
(setq! company-tooltip-margin 1)
(setq! company-format-margin-function 'company-text-icons-margin)
(setq! company-text-icons-add-background t)
(setq! company-text-face-extra-attributes '(:weight bold))
#+end_src

** Customize the faces of Company mode
#+begin_src elisp :results silent
(defvar companyBackground (face-attribute 'default :background) "background color for company faces")
(defvar companyFontColor (face-attribute 'default :foreground) "font color for company")
(defvar companySelectedBackground (face-attribute 'tool-bar :background) "background color for seletec item in company faces")

(custom-set-faces
 ;; '(company-tooltip ((t ((:background companyBackground) (:foreground companyFontColor)))))
 ;; '(company-scrollbar-bg ((t (:background "gray10"))))
 ;; '(company-scrollbar-fg ((t (:background "white"))))
 ;; '(company-tooltip-selection ((t ((:background companyBackground)))))
 '(company-tooltip-common ((t (:foreground "#c3ac43"))))                  ;; Kind of Yellow
 '(company-tooltip-common-selection ((t (:foreground "#ffd100"))))        ;; Same Yellow but Lighter
 '(company-tooltip-annotation ((t (:foreground "#8ccf64"))))              ;; Kind of Green
 '(company-tooltip-annotation-selection ((t (:foreground "#ffd100")))))   ;; Same Yellow as above
#+end_src

* FILE MANAGER (DIRED)
Dired is the file manager within Emacs.  Below, I setup keybindings for image previews (peep-dired).

** Keybindings To Open Dired
| COMMAND    | DESCRIPTION                        | KEYBINDING |
|------------+------------------------------------+------------|
| dired-jump | /Jump to current directory in dired/ | SPC d d    |

** Keybindings Within Dired
| COMMAND            | DESCRIPTION                                 | KEYBINDING |
|--------------------+---------------------------------------------+------------|
| dired-view-file    | /View file in dired/                          | g o        |
| dired-up-directory | /Go up in directory tree/                     | h          |
| dired-find-file    | /Go down in directory tree (or open if file)/ | l          |

** Keybindings For Peep-Dired-Mode
| COMMAND              | DESCRIPTION                              | KEYBINDING |
|----------------------+------------------------------------------+------------|
| peep-dired           | /Toggle previews within dired/             | M p        |
| peep-dired-next-file | /Move to next file in peep-dired-mode/     | j          |
| peep-dired-prev-file | /Move to previous file in peep-dired-mode/ | k          |

#+begin_src emacs-lisp :results silent
(with-eval-after-load 'dired
  (map! :leader
        (:prefix-map ("d" . "dired")
         :desc "Dired Jump Directory" "d" #'dired-jump))
  (define-key dired-mode-map (kbd "M-p") 'peep-dired)
  (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
  (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
  (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
  (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))

(add-hook! 'peep-dired-hook 'evil-normalize-keymaps)
;; ;; With dired-open plugin, you can launch external programs for certain extensions
;; ;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq! dired-open-extensions '(("gif" . "sxiv")
                               ("jpg" . "sxiv")
                               ("png" . "sxiv")
                               ("mkv" . "mpv")
                               ("mp4" . "mpv")))
#+end_src

* CURSOR
- Enable cursor can move at the end of line
- Disable the cursor going back off when switch between Insert an Normal mode

#+begin_src elisp :results silent
(setq! evil-move-beyond-eol t)
(setq! evil-move-cursor-back nil)
#+end_src

* DRAG STUFF
To move a all the line up and down

#+begin_src elisp :results silent
(map! "C-M-k" #'drag-stuff-up)
(map! "C-M-j" #'drag-stuff-down)
#+end_src

* ORG
** Org location
If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!
#+begin_src elisp :results silent
(setq! org-directory "~/org/")
#+end_src

** Clock sound for org timer
#+begin_src elisp :results silent
(after! org
  (setq org-clock-sound "~/Music/ding.wav"))
#+end_src

** Olivetti
Set a bigger width for Olivetti mode
#+begin_src elisp :results silent
(setq! olivetti-body-width 100)
#+end_src

** Defining A Few Things
#+begin_src elisp :results silent
;; Load org-faces to make sure we can set appropriate faces
(require 'org-faces)

(defun efs/org-mode-setup ()
  (org-indent-mode)
  (mixed-pitch-mode 1)
  ;; (visual-fill-column-mode)
  (olivetti-mode 1) ;; To center buffer as word text
  (visual-line-mode 1))

(defun efs/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.6)
                  (org-level-2 . 1.4)
                  (org-level-3 . 1.2)
                  (org-level-4 . 1.2)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font doom-variable-pitch-font :weight 'medium :height (cdr face)))
  ;; Make the document title a bit bigger
  (set-face-attribute 'org-document-title nil :font doom-variable-pitch-font :weight 'bold :height 1.3)

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground 'unspecified :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil :font doom-font :inherit 'fixed-pitch)
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src

Function to auto pass parent node to done if all children are done
#+begin_src elisp :results silent
(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise.
   Only operates on entries with the TODO keyword."
  (let ((org-log-done t)
        (org-log-states nil)
        (todo-state (org-get-todo-state)))
    (when (member todo-state org-todo-keywords-1) ; only operate on entries with the TODO keyword
      (let ((new-state (if (= n-not-done 0) "DONE" "TODO")))
        (org-todo new-state)))))
#+end_src

#+begin_src elisp :results silent
(use-package! org
  :defer t
  :hook (org-mode . efs/org-mode-setup)
  :config
  (setq! org-ellipsis " ▼ ")
  (setq! org-log-done 'time)
  (setq! org-default-priority 67)
  (setq! org-hide-emphasis-markers t)
  (setq! org-hierarchical-todo-statistics nil)
  ;; (setq! display-line-numbers-type visual)
  (efs/org-font-setup)
  :init
  (add-hook 'org-after-todo-statistics-hook #'org-summary-todo))
#+end_src

** Org-Emphasis
#+begin_src elisp :results silent
(setq! org-emphasis-alist
       '(("*" my-org-emphasis-bold)
         ("/" italic)
         ("_" underline)
         ("=" org-verbatim verbatim)
         ("~" org-code verbatim)
         ("+" (:strike-through t))))

(defface my-org-emphasis-bold
  '((default :inherit extra-bold)
    (((class color) (min-colors 88) (background light))
     :foreground "#a60000")
    (((class color) (min-colors 88) (background dark))
     :foreground "#ff8059"))
  "My bold emphasis for Org.")
#+end_src

** Image
Use the actual width of image in org files

#+begin_src elisp :results silent
(setq! org-image-actual-width nil)
#+end_src

** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src elisp :results silent
(use-package! org-bullets
  :defer t
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Fancy Priority
Org-fancy-priorities give us some prettier priorities

#+begin_src elisp :results silent
(use-package! org-fancy-priorities
  :defer t
  :after org
  :hook (org-mode . org-fancy-priorities-mode)
  :config
  (setq! org-fancy-priorities-list '((?A . "[‼]")
                                     (?B . "[❗]")
                                     (?C . "[☕]")
                                     (?D . "[♨]")
                                     (?1 . "[⚡]")
                                     (?2 . "[⮬]")
                                     (?3 . "[⮮]")
                                     (?4 . "[☕]")
                                     (?I . "[IMPORTANT]"))))
#+end_src

** Keyword TODO
Use custom TODO keywords for Org files.
Three different sequences:
+ Text
+ Emoji + Text
+ Items

#+begin_src elisp :results silent
(after! org
  (setq org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
        '((sequence
           "TODO(t)"             ; A task that is ready to be tackled
           "IN-PROGRESS(i)"      ; A task that is in progress
           "HOLD(h)"             ; Something is holding up this task
           "|"                   ; The pipe necessary to separate "active" states and "inactive" states
           "DONE(d)"             ; Task has been completed
           "CANCELLED(c)" )      ; Task has been cancelled
          (sequence
           "🚩TODO(f)"           ; A task that is ready to be tackled
           "👷🏻IN-PROGRESS(w)"    ; A task that is in progress
           "🔒HOLD(l)"           ; Something is holding up this task
           "|"                   ; The pipe necessary to separate "active" states and "inactive" states
           "✔DONE(e)"           ; Task has been completed
           "❌CANCELLED(x)" )
          (sequence
           "[ ](T)"               ; A task that is ready tobe tackled
           "[-](I)"               ; A task that is already started
           "[?](H)"               ; A task that is holding up by a reason ?
           "|"                    ; The pipe necessary to separate "active" states and "inactive" states
           "[X](D)" ))))          ; Tash has been completed

#+end_src

Configure style of TODO keywords
#+begin_src elisp :results silent
(after! org
  (setq org-todo-keyword-faces
        '(("IN-PROGRESS" . (:foreground "#b7a1f5" :weight: bold )) ("HOLD" . org-warning)
          ("[ ]" . (:foreground "#82b66a" :weight: bold)) ("[-]" . (:foreground "#b7a1f5" :weight: bold ))
          ("[?]" . org-warning)
          ("👷🏻IN-PROGRESS" . (:foreground "#b7a1f5" :weight: bold )) ("🔒HOLD" . org-warning))))
#+end_src


* ORG-AGENDA
** View
Change agenda view:
- At top, the #A Priority
- The #B Priority
- In the middle the week view
- Today logs
- At the bottom list of all todo task

#+begin_src elisp :results silent
(after! org
  (setq org-agenda-start-with-log-mode t)
  (setq org-agenda-custom-commands
        '(("c" "Simple agenda view"
           ((tags-todo "+PRIORITY=\"A\""
                       ((org-agenda-overriding-header "High-priority unfinished tasks:")))
            (tags-todo "+PRIORITY=\"B\""
                       ((org-agenda-overriding-header "Priority unfinished tasks:")))
            (agenda "" ((org-agenda-prefix-format "%-15T\t%s [ ] ")
                        (org-agenda-todo-keyword-format "")
                        (org-agenda-start-on-weekday nil)
                        (org-deadline-warning-days 60)
                        (org-agenda-start-day "0d")
                        (org-agenda-start-with-log-mode nil)
                        (org-agenda-skip-scheduled-if-deadline-is-shown t)
                        (org-agenda-log-mode-items '(state))
                        (org-agenda-overriding-header "Week Todo")))
            (agenda "" ((org-agenda-prefix-format "%-15:T\t%?-12t [X] ")
                        (org-agenda-todo-keyword-format "")
                        (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'scheduled 'deadline))
                        (org-agenda-start-on-weekday nil)
                        (org-agenda-archives-mode t)
                        (org-agenda-start-day "0d")
                        (org-agenda-span 1)
                        (org-agenda-start-with-log-mode 'only)
                        (org-agenda-log-mode-items '(closed clock state))
                        (org-agenda-overriding-header "Today")))
            (alltodo "")))
          ("d" "Done of the month"
           ((agenda "" ((org-agenda-prefix-format "%-15:T\t%t [X] ")
                        (org-agenda-todo-keyword-format "")
                        (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'scheduled 'deadline))
                        (org-agenda-start-with-log-mode 'only)
                        (org-agenda-log-mode-items '(closed clock state))
                        (org-agenda-time-grid nil)
                        (org-agenda-span 31)
                        (org-agenda-start-day "-30d")
                        (org-agenda-archives-mode t)
                        (org-agenda-start-on-weekday nil))))))))
#+end_src

** French Holidays
#+begin_src elisp :results silent
(after! org
  (defvar holiday-french-holidays nil
    "French holidays")

  (setq! holiday-french-holidays
         `((holiday-fixed 1 1 "Jour de l'an")
           (holiday-fixed 1 6 "Épiphanie")
           (holiday-fixed 2 2 "Chandeleur")
           (holiday-fixed 2 14 "Saint Valentin")
           (holiday-fixed 5 1 "Fête du travail")
           (holiday-fixed 5 8 "Commémoration de la capitulation de l'Allemagne en 1945")
           (holiday-fixed 6 21 "Fête de la musique")
           (holiday-fixed 7 14 "Fête nationale - Prise de la Bastille")
           (holiday-fixed 8 15 "Assomption (Religieux)")
           (holiday-fixed 11 11 "Armistice de 1918")
           (holiday-fixed 11 1 "Toussaint")
           (holiday-fixed 11 2 "Commémoration des fidèles défunts")
           (holiday-fixed 12 25 "Noël")
           ;; fetes a date variable
           (holiday-easter-etc 0 "Pâques")
           (holiday-easter-etc 1 "Lundi de Pâques")
           (holiday-easter-etc 39 "Ascension")
           (holiday-easter-etc 49 "Pentecôte")
           (holiday-easter-etc -47 "Mardi gras")
           (holiday-float 5 0 4 "Fête des mères")
           ;; dernier dimanche de mai ou premier dimanche de juin si c'est le
           ;; même jour que la pentecôte TODO
           (holiday-float 6 0 3 "Fête des pères"))) ;; troisième dimanche de juin

  (setq! calendar-holidays holiday-french-holidays))
#+end_src

** Auto Refresh
Auto refresh =Org Agenda= buffer when org file updated

#+begin_src elisp :results silent
(defun org-agenda-auto-refresh-agenda-buffer ()
  "If we're in an agenda file, and there is an agenda buffer, refresh it."
  (when (org-agenda-file-p)
    (when-let ((buffer (get-buffer org-agenda-buffer-name)))
      (with-current-buffer buffer
        (org-agenda-redo-all)))))


(after! org
  (add-hook 'after-revert-hook #'org-agenda-auto-refresh-agenda-buffer))
#+end_src

* ORG-ROAM
Configuration for org-roam:
+ Private location
+ New Capture templates

#+begin_src elisp :results silent
(after! org
  :ensure-t
  :custom
  (setq org-roam-directory "~/RoamNotes")
  (setq org-roam-index-file "~/RoamNotes/index.org")
  (setq org-roam-capture-templates '(("d" "default" plain "%?"
                                      :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                                                         "#+title: ${title}\n") :unnarrowed t)
                                     ("p" "problems" plain "\n* [[id:f23824a1-0515-47c6-b386-21d83a9aec21][PROBLEM]]\n%?\n* SOLVING"
                                      :target (file+head "problems/%<%Y%m%d%H%M%S>-${slug}.org"
                                                         "#+title: ${title}\n#+filetags: :Problem:\n") :unnarrowed t))))
#+end_src

** Org-Roam UI
#+begin_src elisp :results silent
(use-package! websocket
  :defer t
  :after org-roam)

(use-package! org-roam-ui
  :defer t
  :after org-roam ;; or :after org
  :hook (after-init . org-roam-ui-mode)
  :config
  (setq! org-roam-ui-follow t
         org-roam-ui-sync-theme t
         org-roam-ui-update-on-save t
         org-roam-ui-open-on-start nil))
#+end_src

* ORG-GCAL
Synchronize google calendar with org

#+begin_src elisp :results silent
(setq! org-gcal-client-id "809125859117-d4lsgmmpri4bmefhrj2n22uqn63gdf42.apps.googleusercontent.com"
       org-gcal-client-secret "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"
       org-gcal-fetch-file-alist '(("corentin33210@gmail.com" .  "~/org/schedule.org")))
(require 'org-gcal)
#+end_src

* ORG-AI
#+begin_src elisp :results silent
(use-package! org-ai
  :defer t
  :commands (org-ai-mode
             org-ai-global-mode)
  :init
  (add-hook 'org-mode-hook #'org-ai-mode) ; enable org-ai in org-mode
  (org-ai-global-mode) ; installs global keybindings on C-c M-a
  :config
  (setq! org-ai-default-chat-model "gpt-3.5-turbo") ; gpt-4 if you are on the gpt-4 beta:
  (org-ai-install-yasnippets) ; if you are using yasnippet and want `ai` snippets
  )
#+end_src

* SEARCH WITH REGEX
Specify can search via regex

#+begin_src elisp :results silent
(require 'ivy)
(require 'counsel)

(setq! ivy-re-builders-alist
       '((counsel-rg . ivy--regex-plus)
         (swiper . ivy--regex-plus)
         (swiper-isearch . ivy--regex-plus)
         (t . ivy--regex-ignore-order)))
#+end_src

* MOUSE SCROLLING
Emacs' default scrolling is annoying because of the sudden half-page jumps.  Also, I wanted to adjust the scrolling speed.

#+begin_src emacs-lisp :results silent
(setq! scroll-conservatively 101) ;; value greater than 100 gets rid of half page jumping
(setq! mouse-wheel-scroll-amount '(3 ((shift) . 3))) ;; how many lines at a time
(setq! mouse-wheel-progressive-speed t) ;; accelerate scrolling
(setq! mouse-wheel-follow-mouse 't) ;; scroll window under mouse
#+end_src

* TREEMACS
** Config
#+begin_src elisp :results silent
(use-package! treemacs
  :defer t
  :config
  ;; Add ignored files and file extensions
  (setq! treemacs-file-ignore-extensions '("o" "gcna" "gcdo" "vscode" "idea")
         treemacs-file-ignore-globs nil)
  (defun my-treemacs-ignore-filter (file full-path)
    "Ignore files specified by `treemacs-file-ignore-extensions' and globs."
    (or (member (file-name-extension file) treemacs-file-ignore-extensions)
        (cl-loop for glob in treemacs-file-ignore-globs
                 thereis (file-name-match-glob glob full-path))))
  (add-to-list 'treemacs-ignored-file-predicates #'my-treemacs-ignore-filter)

  ;; Enable follow mode
  (treemacs-follow-mode t)

  ;; Set treemacs theme
  (setq! doom-themes-treemacs-theme "doom-colors"))
#+end_src

* WEB
** ASTRO
*** Add Web Mode To Astro File
#+BEGIN_SRC emacs-lisp :results silent
(add-to-list 'auto-mode-alist '("\\.astro\\'" . web-mode))
#+END_SRC

** HTML.ERB
*** Add ERB to lsp-mode
#+BEGIN_SRC emacs-lisp :results silent
(after! lsp-mode
  (add-to-list 'lsp-language-id-configuration '(".*\\.html\\.erb$" . "html"))
  (setq lsp-ui-sideline-show-code-actions t))
#+END_SRC

*** Add Web Mode to ERB template and disable format on save
#+BEGIN_SRC emacs-lisp :results silent
(add-hook! 'web-mode-hook
  (when (string-match-p "\\.erb\\'" buffer-file-name)
    (setq! +format-with :none)))
#+END_SRC

** CUSTOM WEB-MODE
#+BEGIN_SRC emacs-lisp :results silent
(use-package! web-mode
  :defer t
  :config
  (setq! web-mode-markup-indent-offset 2)
  (setq! web-mode-css-indent-offset 2)
  (setq! web-mode-code-indent-offset 2)
  (setq! web-mode-auto-close-style 2)
  (setq! web-mode-enable-auto-closing 2))
#+END_SRC

* CENTAUR-TABS
** To fix centaur tabs in emacsclient
#+begin_src elisp :results silent
;; (after! centaur-tabs
;;   (centaur-tabs-group-by-projectile-project))
;; (after! centaur-tabs
;;   (setq! centaur-tabs-set-bar 'right))
;; (add-hook 'server-after-make-frame-hook 'centaur-tabs-mode)
;; Enable centaur-tabs without faulty theming in daemon mode.
;; (if (not (daemonp))
;;         (centaur-tabs-mode)

;;   (defun centaur-tabs-daemon-mode (frame)
;;     (unless (and (featurep 'centaur-tabs) (centaur-tabs-mode-on-p))
;;       (run-at-time nil nil (lambda () (centaur-tabs-mode)))))
;;   (add-hook 'after-make-frame-functions #'centaur-tabs-daemon-mode))
#+end_src

** Add Custom map
Keymap to turn ON/OFF centaur tabs

#+begin_src elisp :results silent
(map! :leader
      :desc "Toggle Centaur Tabs" "t a" #'centaur-tabs-mode)
#+end_src

** Move Between Buffer
Key mapping to move previous and next buffer with and without centaur-tabs

#+begin_src elisp :results silent
(map! :ni "C-," #'+tabs:previous-or-goto)
(map! :ni "C-;" #'+tabs:next-or-goto)
#+end_src

* LSP-MODE
If =lsp-log-io= set to true can cause a performance hit
Refresh less often =lsp-idle= for performance
#+begin_src elisp :results silent
(after! lsp-mode
  (setq lsp-log-io t)
  (setq lsp-ui-doc-enable t)
  (setq lsp-ui-doc-show-with-cursor t)
  (setq lsp-idle-delay 0.200)
  (setq read-process-output-max (* 1024 1024)))

;; (setq! gc-cons-threshold 100000000))
#+end_src

* LSP-BRIDGE
#+begin_src elisp :results silent
;; (require 'yasnippet)
;; (yas-global-mode 1)

;; (after! lsp-mode
;;   (setq lsp-enable-completion nil))

;; (add-to-list 'load-path "~/Application/lsp-bridge")

;; (require 'lsp-bridge)
;; (global-lsp-bridge-mode)
;; (setq acm-menu-length 15)
;; (evil-define-key 'insert acm-mode-map (kbd "C-j") 'acm-select-next)
;; (evil-define-key 'insert acm-mode-map (kbd "C-k") 'acm-select-prev)
;; (add-hook 'acm-mode-hook 'evil-normalize-keymaps)
#+end_src

* PROJECTILE
Permit projectile to create the file if missing

#+begin_src elisp :results silent
(setq! projectile-create-missing-test-files t)
#+end_src

* XEFT
Usefull for looking throught notes
#+begin_src elisp :results silent
(setq! xeft-directory "~/RoamNotes")
#+end_src

* IMPORT OTHER CONFIG
Use external rails config, for snippet and method to navigate easily in rails project

#+begin_src elisp :results silent
(load! (expand-file-name "rails-settings.el" doom-user-dir))
(load! (expand-file-name "crystal-settings.el" doom-user-dir))
#+end_src

* INFORMATION
Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.

(after! PACKAGE
(setq x y))

The exceptions to this rule:

- Setting file/directory variables (like `org-directory')
- Setting variables which explicitly tell you to set them before their
  package is loaded (see 'C-h v VARIABLE' to look up their documentation).
- Setting doom variables (which start with 'doom-' or '+').

  Here are some additional functions/macros that will help you configure Doom.

  - `load!' for loading external *.el files relative to this one
  - `use-package!' for configuring packages
  - `after!' for running code after a package has loaded
  - `add-load-path!' for adding directories to the `load-path', relative to
    this file. Emacs searches the `load-path' when you load packages with
    `require' or `use-package'.
  - `map!' for binding new keys

  To get information about any of these functions/macros, move the cursor over
  the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
  This will open documentation for it, including demos of how they are used.
  Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
  etc).
  You can also try 'gd' (or 'C-c c d') to jump to their definition and see how

  they are implemented.
