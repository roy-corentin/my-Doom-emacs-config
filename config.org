#+title: Config
#+property: header-args :tangle config.el


* $DOOMDIR/config.el -*- lexical-binding: t; -*-

 Place your private configuration here! Remember, you do not need to run 'doom
 sync' after modifying this file!


 Some functionality uses this to identify you, e.g. GPG configuration, email
 clients, file templates and snippets. It is optional.
#+begin_src elisp
(setq user-full-name "Corentin Roy"
      user-mail-address "corentin.roy02@laposte.net")

#+end_src

* Doom font
- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.
- `doom-unicode-font' -- for unicode glyphs
- `doom-serif-font' -- for the `fixed-pitch-serif' face

 See 'C-h v doom-font' for documentation and more examples of what they
 accept. For example:

#+begin_src elisp
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
(setq doom-font (font-spec :family "JetBrainsMono NF" :size 12 :weight 'medium))
;; (setq doom-font (font-spec :family "Hack Nerd Font" :size 12 :weight 'medium))

;; enable bold and italic
(after! doom-themes
      (setq doom-themes-enable-bold t)
      (setq doom-themes-enable-italic t))

;; keyword in Italic for example "for"
(custom-set-faces!
  '(font-lock-keyword-face :slant italic))
#+end_src


If you or Emacs can't find your font, use 'M-x describe-font' to look them
up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
refresh your font settings. If Emacs still can't find your font, it likely
wasn't installed correctly. Font issues are rarely Doom issues!

* Theme
** Doom Theme
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:
#+begin_src elisp
(setq doom-theme 'doom-one)
;; (setq doom-theme 'doom-solarized-dark)
#+end_src

** Set Transparency
#+begin_src elisp
(set-frame-parameter (selected-frame) 'alpha '(97 97))
(add-to-list 'default-frame-alist '(alpha 97 97))
#+end_src

* Line setup
This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.
#+begin_src elisp
(setq display-line-numbers-type t)
#+end_src

* Splash Screen
#+begin_src elisp
;; (setq fancy-splash-image "~/Pictures/Fox.png")
(setq fancy-splash-image "~/Pictures/Doom_Logo.png")
#+end_src

* Company
#+begin_src elisp
(require 'company-tabnine)
(add-to-list 'company-backends #'company-tabnine)
(setq company-idle-delay 0
      company-minimum-prefix-length 1)
(setq company-tooltip-margin 3)
(setq company-format-margin-function 'company-text-icons-margin)
(setq company-text-icons-add-background t)
(custom-set-faces
 '(company-tooltip
   ((t (:background "#57666a" )))))
#+end_src

* Move between mode
#+begin_src elisp
;; disabled move backward between different mode
(setq evil-move-beyond-eol t)
(setq evil-move-cursor-back nil)
#+end_src

* Move between buffer
#+begin_src elisp
;; Previous and next buffer
(map! :ni "C-," #'previous-buffer)
(map! :ni "C-;" #'next-buffer)
#+end_src

* Drag stuff
#+begin_src elisp
(map! "C-M-k" #'drag-stuff-up)
(map! "C-M-j" #'drag-stuff-down)
#+end_src

* Add .html.erb to lsp-mode
#+begin_src elisp
(after! lsp-mode
        (add-to-list 'lsp-language-id-configuration '(".*\\.html\\.erb$" . "html"))
        (setq lsp-ui-sideline-show-code-actions t)
)
#+end_src

* Org
** Org location
#+begin_src elisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")
#+end_src

** Disable line numbers for Org mode
#+begin_src elisp
(dolist (mode '(org-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Clock sound for org timer
#+begin_src elisp
;; (after! org
;;   (setq org-clock-sound "PATH"))
#+end_src

** Org mode config
#+begin_src elisp
(defun efs/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))

(defun efs/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

(use-package org
  :hook (org-mode . efs/org-mode-setup)
  :config
  (setq org-ellipsis " ▾")
  (efs/org-font-setup))

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))

(setq org-image-actual-width nil)
#+end_src


* Treemacs

** Filter to treemacs
#+begin_src elisp
(after! treemacs
  (defvar treemacs-file-ignore-extensions '()
    "File extension which `treemacs-ignore-filter' will ensure are ignored")
  (defvar treemacs-file-ignore-globs '()
    "Globs which will are transformed to `treemacs-file-ignore-regexps' which `treemacs-ignore-filter' will ensure are ignored")
  (defvar treemacs-file-ignore-regexps '()
    "RegExps to be tested to ignore files, generated from `treeemacs-file-ignore-globs'")
  (defun treemacs-file-ignore-generate-regexps ()
    "Generate `treemacs-file-ignore-regexps' from `treemacs-file-ignore-globs'"
    (setq treemacs-file-ignore-regexps (mapcar 'dired-glob-regexp treemacs-file-ignore-globs)))
  (if (equal treemacs-file-ignore-globs '()) nil (treemacs-file-ignore-generate-regexps))
  (defun treemacs-ignore-filter (file full-path)
    "Ignore files specified by `treemacs-file-ignore-extensions', and `treemacs-file-ignore-regexps'"
    (or (member (file-name-extension file) treemacs-file-ignore-extensions)
        (let ((ignore-file nil))
          (dolist (regexp treemacs-file-ignore-regexps ignore-file)
            (setq ignore-file (or ignore-file (if (string-match-p regexp full-path) t nil)))))))
  (add-to-list 'treemacs-ignored-file-predicates #'treemacs-ignore-filter))

(setq treemacs-file-ignore-extensions
      '(;; C/C++
        "o"
        "gcna"
        "gcdo"
        ;; other
        "vscode"
        "idea"
        ))
#+end_src

** Treemacs follow mode
#+begin_src elisp
(use-package treemacs
  :defer t
  :config
  (progn
    (treemacs-follow-mode t))
)
#+end_src

** Add icon in treemacs
#+begin_src elisp
(setq doom-themes-treemacs-theme "doom-colors")
#+end_src

* Python
** completion pyton
#+begin_src elisp
(require 'lsp-python-ms)
(setq lsp-python-ms-auto-install-server t)
(add-hook 'python-mode-hook #'lsp) ; or lsp-deferred
#+end_src

** Black for python format
#+begin_src elisp
(use-package! python-black
  :demand t
  :after python
  :config
  (add-hook! 'python-mode-hook #'python-black-on-save-mode)
  (map! :leader :desc "Blacken Buffer" "m b b" #'python-black-buffer)
  (map! :leader :desc "Blacken Region" "m b r" #'python-black-region)
  (map! :leader :desc "Blacken Statement" "m b s" #'python-black-statement)
)
#+end_src

* Prettier
#+begin_src elisp
(use-package prettier
  :after js2-mode
  :init
  (add-hook 'js2-mode-hook 'prettier-mode)
  (add-hook 'web-mode-hook 'prettier-mode))
#+end_src

* Add web-mode for react
#+begin_src elisp
(add-to-list 'auto-mode-alist '("/some/react/path/.*\\.js[x]?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("/some/react/path/.*\\.ts[x]?\\'" . web-mode))
#+end_src

* org-roam

Example of basic config org-raom
 - (after! org
          (setq org-roam-directory "~/Documents/org/roam/")
          (setq org-roam-index-file "~/Documents/org/roam/index.org"))
#+begin_src elisp
(after! org
        (setq org-roam-directory "~/RoamNotes")
        (setq org-roam-index-file "~/RoamNotes/index.org"))

;; (use-package org-roam
;;   ;; :ensure t

;;   :custom
;;   (org-roam-directory "~/RoamNotes")
;;   :bind (("C-c n l" . org-roam-buffer-toggle)
;;          ("C-c n f" . org-roam-node-find)
;;          ("C-c n i" . org-roam-node-insert))
;;   :config
;;   (org-roam-setup))
#+end_src

* Typescript react config
#+begin_src elisp
(setq-hook! 'typescript-tsx-mode-hook +format-with-lsp nil)
(setq-hook! 'typescript-mode-hook +format-with-lsp nil)
#+end_src

* Import other config
#+begin_src elisp
(load (expand-file-name "rails-settings.el" doom-private-dir))
#+end_src

* Informations
 Whenever you reconfigure a package, make sure to wrap your config in an
 `after!' block, otherwise Doom's defaults may override your settings. E.g.

   (after! PACKAGE
     (setq x y))

 The exceptions to this rule:

   - Setting file/directory variables (like `org-directory')
   - Setting variables which explicitly tell you to set them before their
     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
   - Setting doom variables (which start with 'doom-' or '+').

 Here are some additional functions/macros that will help you configure Doom.

 - `load!' for loading external *.el files relative to this one
 - `use-package!' for configuring packages
 - `after!' for running code after a package has loaded
 - `add-load-path!' for adding directories to the `load-path', relative to
   this file. Emacs searches the `load-path' when you load packages with
   `require' or `use-package'.
 - `map!' for binding new keys

 To get information about any of these functions/macros, move the cursor over
 the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
 This will open documentation for it, including demos of how they are used.
 Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
 etc).
 You can also try 'gd' (or 'C-c c d') to jump to their definition and see how

 they are implemented.
